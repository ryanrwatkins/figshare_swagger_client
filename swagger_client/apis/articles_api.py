# coding: utf-8

"""
    Figshare API

    Figshare apiv2. Using Swagger 2.0

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class ArticlesApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def account_article_report(self, **kwargs):
        """
        Account Article Report
        Return status on all reports generated for the account from the oauth credentials
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.account_article_report(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int group_id: A group ID to filter by
        :return: list[AccountReport]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.account_article_report_with_http_info(**kwargs)
        else:
            (data) = self.account_article_report_with_http_info(**kwargs)
            return data

    def account_article_report_with_http_info(self, **kwargs):
        """
        Account Article Report
        Return status on all reports generated for the account from the oauth credentials
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.account_article_report_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int group_id: A group ID to filter by
        :return: list[AccountReport]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_article_report" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'group_id' in params:
            query_params.append(('group_id', params['group_id']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/articles/export', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[AccountReport]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def account_article_report_generate(self, **kwargs):
        """
        Initiate a new Report
        Initiate a new Article Report for this Account. There is a limit of 1 report per day.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.account_article_report_generate(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: AccountReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.account_article_report_generate_with_http_info(**kwargs)
        else:
            (data) = self.account_article_report_generate_with_http_info(**kwargs)
            return data

    def account_article_report_generate_with_http_info(self, **kwargs):
        """
        Initiate a new Report
        Initiate a new Article Report for this Account. There is a limit of 1 report per day.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.account_article_report_generate_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: AccountReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_article_report_generate" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/articles/export', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='AccountReport',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def article_details(self, article_id, **kwargs):
        """
        View article details
        View an article
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.article_details(article_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int article_id: Article Unique identifier (required)
        :return: ArticleComplete
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.article_details_with_http_info(article_id, **kwargs)
        else:
            (data) = self.article_details_with_http_info(article_id, **kwargs)
            return data

    def article_details_with_http_info(self, article_id, **kwargs):
        """
        View article details
        View an article
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.article_details_with_http_info(article_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int article_id: Article Unique identifier (required)
        :return: ArticleComplete
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method article_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if ('article_id' not in params) or (params['article_id'] is None):
            raise ValueError("Missing the required parameter `article_id` when calling `article_details`")

        if 'article_id' in params and params['article_id'] < 1:
            raise ValueError("Invalid value for parameter `article_id` when calling `article_details`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/articles/{article_id}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ArticleComplete',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def article_file_details(self, article_id, file_id, **kwargs):
        """
        Article file details
        File by id
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.article_file_details(article_id, file_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int article_id: Article Unique identifier (required)
        :param int file_id: File Unique identifier (required)
        :return: PublicFile
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.article_file_details_with_http_info(article_id, file_id, **kwargs)
        else:
            (data) = self.article_file_details_with_http_info(article_id, file_id, **kwargs)
            return data

    def article_file_details_with_http_info(self, article_id, file_id, **kwargs):
        """
        Article file details
        File by id
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.article_file_details_with_http_info(article_id, file_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int article_id: Article Unique identifier (required)
        :param int file_id: File Unique identifier (required)
        :return: PublicFile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id', 'file_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method article_file_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if ('article_id' not in params) or (params['article_id'] is None):
            raise ValueError("Missing the required parameter `article_id` when calling `article_file_details`")
        # verify the required parameter 'file_id' is set
        if ('file_id' not in params) or (params['file_id'] is None):
            raise ValueError("Missing the required parameter `file_id` when calling `article_file_details`")

        if 'article_id' in params and params['article_id'] < 1:
            raise ValueError("Invalid value for parameter `article_id` when calling `article_file_details`, must be a value greater than or equal to `1`")
        if 'file_id' in params and params['file_id'] < 1:
            raise ValueError("Invalid value for parameter `file_id` when calling `article_file_details`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']
        if 'file_id' in params:
            path_params['file_id'] = params['file_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/articles/{article_id}/files/{file_id}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PublicFile',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def article_files(self, article_id, **kwargs):
        """
        List article files
        Files list for article
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.article_files(article_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int article_id: Article Unique identifier (required)
        :return: list[PublicFile]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.article_files_with_http_info(article_id, **kwargs)
        else:
            (data) = self.article_files_with_http_info(article_id, **kwargs)
            return data

    def article_files_with_http_info(self, article_id, **kwargs):
        """
        List article files
        Files list for article
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.article_files_with_http_info(article_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int article_id: Article Unique identifier (required)
        :return: list[PublicFile]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method article_files" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if ('article_id' not in params) or (params['article_id'] is None):
            raise ValueError("Missing the required parameter `article_id` when calling `article_files`")

        if 'article_id' in params and params['article_id'] < 1:
            raise ValueError("Invalid value for parameter `article_id` when calling `article_files`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/articles/{article_id}/files', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[PublicFile]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def article_version_confidentiality(self, article_id, v_number, **kwargs):
        """
        Public Article Confidentiality for article version
        Confidentiality for article version. The confidentiality feature is now deprecated. This has been replaced by the new extended embargo functionality and all items that used to be confidential have now been migrated to items with a permanent embargo on files. All API endpoints related to this functionality will remain for backwards compatibility, but will now be attached to the new extended embargo workflows.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.article_version_confidentiality(article_id, v_number, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int article_id: Article Unique identifier (required)
        :param int v_number: Version Number (required)
        :return: ArticleConfidentiality
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.article_version_confidentiality_with_http_info(article_id, v_number, **kwargs)
        else:
            (data) = self.article_version_confidentiality_with_http_info(article_id, v_number, **kwargs)
            return data

    def article_version_confidentiality_with_http_info(self, article_id, v_number, **kwargs):
        """
        Public Article Confidentiality for article version
        Confidentiality for article version. The confidentiality feature is now deprecated. This has been replaced by the new extended embargo functionality and all items that used to be confidential have now been migrated to items with a permanent embargo on files. All API endpoints related to this functionality will remain for backwards compatibility, but will now be attached to the new extended embargo workflows.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.article_version_confidentiality_with_http_info(article_id, v_number, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int article_id: Article Unique identifier (required)
        :param int v_number: Version Number (required)
        :return: ArticleConfidentiality
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id', 'v_number']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method article_version_confidentiality" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if ('article_id' not in params) or (params['article_id'] is None):
            raise ValueError("Missing the required parameter `article_id` when calling `article_version_confidentiality`")
        # verify the required parameter 'v_number' is set
        if ('v_number' not in params) or (params['v_number'] is None):
            raise ValueError("Missing the required parameter `v_number` when calling `article_version_confidentiality`")

        if 'article_id' in params and params['article_id'] < 1:
            raise ValueError("Invalid value for parameter `article_id` when calling `article_version_confidentiality`, must be a value greater than or equal to `1`")
        if 'v_number' in params and params['v_number'] < 1:
            raise ValueError("Invalid value for parameter `v_number` when calling `article_version_confidentiality`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']
        if 'v_number' in params:
            path_params['v_number'] = params['v_number']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/articles/{article_id}/versions/{v_number}/confidentiality', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ArticleConfidentiality',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def article_version_details(self, article_id, v_number, **kwargs):
        """
        Article details for version
        Article with specified version
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.article_version_details(article_id, v_number, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int article_id: Article Unique identifier (required)
        :param int v_number: Article Version Number (required)
        :return: ArticleComplete
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.article_version_details_with_http_info(article_id, v_number, **kwargs)
        else:
            (data) = self.article_version_details_with_http_info(article_id, v_number, **kwargs)
            return data

    def article_version_details_with_http_info(self, article_id, v_number, **kwargs):
        """
        Article details for version
        Article with specified version
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.article_version_details_with_http_info(article_id, v_number, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int article_id: Article Unique identifier (required)
        :param int v_number: Article Version Number (required)
        :return: ArticleComplete
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id', 'v_number']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method article_version_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if ('article_id' not in params) or (params['article_id'] is None):
            raise ValueError("Missing the required parameter `article_id` when calling `article_version_details`")
        # verify the required parameter 'v_number' is set
        if ('v_number' not in params) or (params['v_number'] is None):
            raise ValueError("Missing the required parameter `v_number` when calling `article_version_details`")

        if 'article_id' in params and params['article_id'] < 1:
            raise ValueError("Invalid value for parameter `article_id` when calling `article_version_details`, must be a value greater than or equal to `1`")
        if 'v_number' in params and params['v_number'] < 1:
            raise ValueError("Invalid value for parameter `v_number` when calling `article_version_details`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']
        if 'v_number' in params:
            path_params['v_number'] = params['v_number']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/articles/{article_id}/versions/{v_number}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ArticleComplete',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def article_version_embargo(self, article_id, v_number, **kwargs):
        """
        Public Article Embargo for article version
        Embargo for article version
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.article_version_embargo(article_id, v_number, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int article_id: Article Unique identifier (required)
        :param int v_number: Version Number (required)
        :return: ArticleEmbargo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.article_version_embargo_with_http_info(article_id, v_number, **kwargs)
        else:
            (data) = self.article_version_embargo_with_http_info(article_id, v_number, **kwargs)
            return data

    def article_version_embargo_with_http_info(self, article_id, v_number, **kwargs):
        """
        Public Article Embargo for article version
        Embargo for article version
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.article_version_embargo_with_http_info(article_id, v_number, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int article_id: Article Unique identifier (required)
        :param int v_number: Version Number (required)
        :return: ArticleEmbargo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id', 'v_number']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method article_version_embargo" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if ('article_id' not in params) or (params['article_id'] is None):
            raise ValueError("Missing the required parameter `article_id` when calling `article_version_embargo`")
        # verify the required parameter 'v_number' is set
        if ('v_number' not in params) or (params['v_number'] is None):
            raise ValueError("Missing the required parameter `v_number` when calling `article_version_embargo`")

        if 'article_id' in params and params['article_id'] < 1:
            raise ValueError("Invalid value for parameter `article_id` when calling `article_version_embargo`, must be a value greater than or equal to `1`")
        if 'v_number' in params and params['v_number'] < 1:
            raise ValueError("Invalid value for parameter `v_number` when calling `article_version_embargo`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']
        if 'v_number' in params:
            path_params['v_number'] = params['v_number']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/articles/{article_id}/versions/{v_number}/embargo', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ArticleEmbargo',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def article_version_update(self, article_id, version_id, article, **kwargs):
        """
        Update article version
        Updating an article version by passing body parameters; request can also be made with the PATCH method.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.article_version_update(article_id, version_id, article, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int article_id: Article unique identifier (required)
        :param int version_id: Article version identifier (required)
        :param ArticleUpdate article: Article description (required)
        :return: LocationWarningsUpdate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.article_version_update_with_http_info(article_id, version_id, article, **kwargs)
        else:
            (data) = self.article_version_update_with_http_info(article_id, version_id, article, **kwargs)
            return data

    def article_version_update_with_http_info(self, article_id, version_id, article, **kwargs):
        """
        Update article version
        Updating an article version by passing body parameters; request can also be made with the PATCH method.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.article_version_update_with_http_info(article_id, version_id, article, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int article_id: Article unique identifier (required)
        :param int version_id: Article version identifier (required)
        :param ArticleUpdate article: Article description (required)
        :return: LocationWarningsUpdate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id', 'version_id', 'article']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method article_version_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if ('article_id' not in params) or (params['article_id'] is None):
            raise ValueError("Missing the required parameter `article_id` when calling `article_version_update`")
        # verify the required parameter 'version_id' is set
        if ('version_id' not in params) or (params['version_id'] is None):
            raise ValueError("Missing the required parameter `version_id` when calling `article_version_update`")
        # verify the required parameter 'article' is set
        if ('article' not in params) or (params['article'] is None):
            raise ValueError("Missing the required parameter `article` when calling `article_version_update`")

        if 'article_id' in params and params['article_id'] < 1:
            raise ValueError("Invalid value for parameter `article_id` when calling `article_version_update`, must be a value greater than or equal to `1`")
        if 'version_id' in params and params['version_id'] < 1:
            raise ValueError("Invalid value for parameter `version_id` when calling `article_version_update`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']
        if 'version_id' in params:
            path_params['version_id'] = params['version_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'article' in params:
            body_params = params['article']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/articles/{article_id}/versions/{version_id}/', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='LocationWarningsUpdate',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def article_version_update_thumb(self, article_id, version_id, file_id, **kwargs):
        """
        Update article version thumbnail
        For a given public article version update the article thumbnail by choosing one of the associated files
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.article_version_update_thumb(article_id, version_id, file_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int article_id: Article unique identifier (required)
        :param int version_id: Article version identifier (required)
        :param FileId file_id: File ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.article_version_update_thumb_with_http_info(article_id, version_id, file_id, **kwargs)
        else:
            (data) = self.article_version_update_thumb_with_http_info(article_id, version_id, file_id, **kwargs)
            return data

    def article_version_update_thumb_with_http_info(self, article_id, version_id, file_id, **kwargs):
        """
        Update article version thumbnail
        For a given public article version update the article thumbnail by choosing one of the associated files
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.article_version_update_thumb_with_http_info(article_id, version_id, file_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int article_id: Article unique identifier (required)
        :param int version_id: Article version identifier (required)
        :param FileId file_id: File ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id', 'version_id', 'file_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method article_version_update_thumb" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if ('article_id' not in params) or (params['article_id'] is None):
            raise ValueError("Missing the required parameter `article_id` when calling `article_version_update_thumb`")
        # verify the required parameter 'version_id' is set
        if ('version_id' not in params) or (params['version_id'] is None):
            raise ValueError("Missing the required parameter `version_id` when calling `article_version_update_thumb`")
        # verify the required parameter 'file_id' is set
        if ('file_id' not in params) or (params['file_id'] is None):
            raise ValueError("Missing the required parameter `file_id` when calling `article_version_update_thumb`")

        if 'article_id' in params and params['article_id'] < 1:
            raise ValueError("Invalid value for parameter `article_id` when calling `article_version_update_thumb`, must be a value greater than or equal to `1`")
        if 'version_id' in params and params['version_id'] < 1:
            raise ValueError("Invalid value for parameter `version_id` when calling `article_version_update_thumb`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']
        if 'version_id' in params:
            path_params['version_id'] = params['version_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'file_id' in params:
            body_params = params['file_id']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/articles/{article_id}/versions/{version_id}/update_thumb', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def article_versions(self, article_id, **kwargs):
        """
        List article versions
        List public article versions
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.article_versions(article_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int article_id: Article Unique identifier (required)
        :return: list[ArticleVersions]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.article_versions_with_http_info(article_id, **kwargs)
        else:
            (data) = self.article_versions_with_http_info(article_id, **kwargs)
            return data

    def article_versions_with_http_info(self, article_id, **kwargs):
        """
        List article versions
        List public article versions
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.article_versions_with_http_info(article_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int article_id: Article Unique identifier (required)
        :return: list[ArticleVersions]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method article_versions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if ('article_id' not in params) or (params['article_id'] is None):
            raise ValueError("Missing the required parameter `article_id` when calling `article_versions`")

        if 'article_id' in params and params['article_id'] < 1:
            raise ValueError("Invalid value for parameter `article_id` when calling `article_versions`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/articles/{article_id}/versions', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[ArticleVersions]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def articles_list(self, **kwargs):
        """
        Public Articles
        Returns a list of public articles
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.articles_list(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_cursor: Unique hash used for bypassing the item retrieval limit of 9,000 entities. When using this parameter, please note that the offset parameter will not be available, but the limit parameter will still work as expected.
        :param int page: Page number. Used for pagination with page_size
        :param int page_size: The number of results included on a page. Used for pagination with page
        :param int limit: Number of results included on a page. Used for pagination with query
        :param int offset: Where to start the listing(the offset of the first result). Used for pagination with limit
        :param str order: The field by which to order. Default varies by endpoint/resource.
        :param str order_direction:
        :param int institution: only return articles from this institution
        :param str published_since: Filter by article publishing date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD
        :param str modified_since: Filter by article modified date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD
        :param int group: only return articles from this group
        :param str resource_doi: only return articles with this resource_doi
        :param int item_type: Only return articles with the respective type. Mapping for item_type is: 1 - Figure, 2 - Media, 3 - Dataset, 5 - Poster, 6 - Journal contribution, 7 - Presentation, 8 - Thesis, 9 - Software, 11 - Online resource, 12 - Preprint, 13 - Book, 14 - Conference contribution, 15 - Chapter, 16 - Peer review, 17 - Educational resource, 18 - Report, 19 - Standard, 20 - Composition, 21 - Funding, 22 - Physical object, 23 - Data management plan, 24 - Workflow, 25 - Monograph, 26 - Performance, 27 - Event, 28 - Service, 29 - Model
        :param str doi: only return articles with this doi
        :param str handle: only return articles with this handle
        :return: list[Article]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.articles_list_with_http_info(**kwargs)
        else:
            (data) = self.articles_list_with_http_info(**kwargs)
            return data

    def articles_list_with_http_info(self, **kwargs):
        """
        Public Articles
        Returns a list of public articles
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.articles_list_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_cursor: Unique hash used for bypassing the item retrieval limit of 9,000 entities. When using this parameter, please note that the offset parameter will not be available, but the limit parameter will still work as expected.
        :param int page: Page number. Used for pagination with page_size
        :param int page_size: The number of results included on a page. Used for pagination with page
        :param int limit: Number of results included on a page. Used for pagination with query
        :param int offset: Where to start the listing(the offset of the first result). Used for pagination with limit
        :param str order: The field by which to order. Default varies by endpoint/resource.
        :param str order_direction:
        :param int institution: only return articles from this institution
        :param str published_since: Filter by article publishing date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD
        :param str modified_since: Filter by article modified date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD
        :param int group: only return articles from this group
        :param str resource_doi: only return articles with this resource_doi
        :param int item_type: Only return articles with the respective type. Mapping for item_type is: 1 - Figure, 2 - Media, 3 - Dataset, 5 - Poster, 6 - Journal contribution, 7 - Presentation, 8 - Thesis, 9 - Software, 11 - Online resource, 12 - Preprint, 13 - Book, 14 - Conference contribution, 15 - Chapter, 16 - Peer review, 17 - Educational resource, 18 - Report, 19 - Standard, 20 - Composition, 21 - Funding, 22 - Physical object, 23 - Data management plan, 24 - Workflow, 25 - Monograph, 26 - Performance, 27 - Event, 28 - Service, 29 - Model
        :param str doi: only return articles with this doi
        :param str handle: only return articles with this handle
        :return: list[Article]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_cursor', 'page', 'page_size', 'limit', 'offset', 'order', 'order_direction', 'institution', 'published_since', 'modified_since', 'group', 'resource_doi', 'item_type', 'doi', 'handle']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method articles_list" % key
                )
            params[key] = val
        del params['kwargs']

        if 'page' in params and params['page'] > 5000:
            raise ValueError("Invalid value for parameter `page` when calling `articles_list`, must be a value less than or equal to `5000`")
        if 'page' in params and params['page'] < 1:
            raise ValueError("Invalid value for parameter `page` when calling `articles_list`, must be a value greater than or equal to `1`")
        if 'page_size' in params and params['page_size'] > 1000:
            raise ValueError("Invalid value for parameter `page_size` when calling `articles_list`, must be a value less than or equal to `1000`")
        if 'page_size' in params and params['page_size'] < 1:
            raise ValueError("Invalid value for parameter `page_size` when calling `articles_list`, must be a value greater than or equal to `1`")
        if 'limit' in params and params['limit'] > 1000:
            raise ValueError("Invalid value for parameter `limit` when calling `articles_list`, must be a value less than or equal to `1000`")
        if 'limit' in params and params['limit'] < 1:
            raise ValueError("Invalid value for parameter `limit` when calling `articles_list`, must be a value greater than or equal to `1`")
        if 'offset' in params and params['offset'] > 5000:
            raise ValueError("Invalid value for parameter `offset` when calling `articles_list`, must be a value less than or equal to `5000`")
        if 'offset' in params and params['offset'] < 0:
            raise ValueError("Invalid value for parameter `offset` when calling `articles_list`, must be a value greater than or equal to `0`")

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))
        if 'limit' in params:
            query_params.append(('limit', params['limit']))
        if 'offset' in params:
            query_params.append(('offset', params['offset']))
        if 'order' in params:
            query_params.append(('order', params['order']))
        if 'order_direction' in params:
            query_params.append(('order_direction', params['order_direction']))
        if 'institution' in params:
            query_params.append(('institution', params['institution']))
        if 'published_since' in params:
            query_params.append(('published_since', params['published_since']))
        if 'modified_since' in params:
            query_params.append(('modified_since', params['modified_since']))
        if 'group' in params:
            query_params.append(('group', params['group']))
        if 'resource_doi' in params:
            query_params.append(('resource_doi', params['resource_doi']))
        if 'item_type' in params:
            query_params.append(('item_type', params['item_type']))
        if 'doi' in params:
            query_params.append(('doi', params['doi']))
        if 'handle' in params:
            query_params.append(('handle', params['handle']))

        header_params = {}
        if 'x_cursor' in params:
            header_params['X-Cursor'] = params['x_cursor']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/articles', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[Article]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def articles_search(self, **kwargs):
        """
        Public Articles Search
        Returns a list of public articles, filtered by the search parameters
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.articles_search(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_cursor: Unique hash used for bypassing the item retrieval limit of 9,000 entities. When using this parameter, please note that the offset parameter will not be available, but the limit parameter will still work as expected.
        :param ArticleSearch search: Search Parameters
        :return: list[ArticleWithProject]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.articles_search_with_http_info(**kwargs)
        else:
            (data) = self.articles_search_with_http_info(**kwargs)
            return data

    def articles_search_with_http_info(self, **kwargs):
        """
        Public Articles Search
        Returns a list of public articles, filtered by the search parameters
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.articles_search_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_cursor: Unique hash used for bypassing the item retrieval limit of 9,000 entities. When using this parameter, please note that the offset parameter will not be available, but the limit parameter will still work as expected.
        :param ArticleSearch search: Search Parameters
        :return: list[ArticleWithProject]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_cursor', 'search']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method articles_search" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_cursor' in params:
            header_params['X-Cursor'] = params['x_cursor']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'search' in params:
            body_params = params['search']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/articles/search', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[ArticleWithProject]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_article_author_delete(self, article_id, author_id, **kwargs):
        """
        Delete article author
        De-associate author from article
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_article_author_delete(article_id, author_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int article_id: Article unique identifier (required)
        :param int author_id: Article Author unique identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_article_author_delete_with_http_info(article_id, author_id, **kwargs)
        else:
            (data) = self.private_article_author_delete_with_http_info(article_id, author_id, **kwargs)
            return data

    def private_article_author_delete_with_http_info(self, article_id, author_id, **kwargs):
        """
        Delete article author
        De-associate author from article
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_article_author_delete_with_http_info(article_id, author_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int article_id: Article unique identifier (required)
        :param int author_id: Article Author unique identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id', 'author_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_article_author_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if ('article_id' not in params) or (params['article_id'] is None):
            raise ValueError("Missing the required parameter `article_id` when calling `private_article_author_delete`")
        # verify the required parameter 'author_id' is set
        if ('author_id' not in params) or (params['author_id'] is None):
            raise ValueError("Missing the required parameter `author_id` when calling `private_article_author_delete`")

        if 'article_id' in params and params['article_id'] < 1:
            raise ValueError("Invalid value for parameter `article_id` when calling `private_article_author_delete`, must be a value greater than or equal to `1`")
        if 'author_id' in params and params['author_id'] < 1:
            raise ValueError("Invalid value for parameter `author_id` when calling `private_article_author_delete`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']
        if 'author_id' in params:
            path_params['author_id'] = params['author_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/articles/{article_id}/authors/{author_id}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_article_authors_add(self, article_id, authors, **kwargs):
        """
        Add article authors
        Associate new authors with the article. This will add new authors to the list of already associated authors
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_article_authors_add(article_id, authors, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int article_id: Article unique identifier (required)
        :param AuthorsCreator authors: Authors description (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_article_authors_add_with_http_info(article_id, authors, **kwargs)
        else:
            (data) = self.private_article_authors_add_with_http_info(article_id, authors, **kwargs)
            return data

    def private_article_authors_add_with_http_info(self, article_id, authors, **kwargs):
        """
        Add article authors
        Associate new authors with the article. This will add new authors to the list of already associated authors
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_article_authors_add_with_http_info(article_id, authors, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int article_id: Article unique identifier (required)
        :param AuthorsCreator authors: Authors description (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id', 'authors']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_article_authors_add" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if ('article_id' not in params) or (params['article_id'] is None):
            raise ValueError("Missing the required parameter `article_id` when calling `private_article_authors_add`")
        # verify the required parameter 'authors' is set
        if ('authors' not in params) or (params['authors'] is None):
            raise ValueError("Missing the required parameter `authors` when calling `private_article_authors_add`")

        if 'article_id' in params and params['article_id'] < 1:
            raise ValueError("Invalid value for parameter `article_id` when calling `private_article_authors_add`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'authors' in params:
            body_params = params['authors']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/articles/{article_id}/authors', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_article_authors_list(self, article_id, **kwargs):
        """
        List article authors
        List article authors
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_article_authors_list(article_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int article_id: Article unique identifier (required)
        :return: list[Author]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_article_authors_list_with_http_info(article_id, **kwargs)
        else:
            (data) = self.private_article_authors_list_with_http_info(article_id, **kwargs)
            return data

    def private_article_authors_list_with_http_info(self, article_id, **kwargs):
        """
        List article authors
        List article authors
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_article_authors_list_with_http_info(article_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int article_id: Article unique identifier (required)
        :return: list[Author]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_article_authors_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if ('article_id' not in params) or (params['article_id'] is None):
            raise ValueError("Missing the required parameter `article_id` when calling `private_article_authors_list`")

        if 'article_id' in params and params['article_id'] < 1:
            raise ValueError("Invalid value for parameter `article_id` when calling `private_article_authors_list`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/articles/{article_id}/authors', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[Author]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_article_authors_replace(self, article_id, authors, **kwargs):
        """
        Replace article authors
        Associate new authors with the article. This will remove all already associated authors and add these new ones
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_article_authors_replace(article_id, authors, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int article_id: Article unique identifier (required)
        :param AuthorsCreator authors: Authors description (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_article_authors_replace_with_http_info(article_id, authors, **kwargs)
        else:
            (data) = self.private_article_authors_replace_with_http_info(article_id, authors, **kwargs)
            return data

    def private_article_authors_replace_with_http_info(self, article_id, authors, **kwargs):
        """
        Replace article authors
        Associate new authors with the article. This will remove all already associated authors and add these new ones
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_article_authors_replace_with_http_info(article_id, authors, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int article_id: Article unique identifier (required)
        :param AuthorsCreator authors: Authors description (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id', 'authors']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_article_authors_replace" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if ('article_id' not in params) or (params['article_id'] is None):
            raise ValueError("Missing the required parameter `article_id` when calling `private_article_authors_replace`")
        # verify the required parameter 'authors' is set
        if ('authors' not in params) or (params['authors'] is None):
            raise ValueError("Missing the required parameter `authors` when calling `private_article_authors_replace`")

        if 'article_id' in params and params['article_id'] < 1:
            raise ValueError("Invalid value for parameter `article_id` when calling `private_article_authors_replace`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'authors' in params:
            body_params = params['authors']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/articles/{article_id}/authors', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_article_categories_add(self, article_id, categories, **kwargs):
        """
        Add article categories
        Associate new categories with the article. This will add new categories to the list of already associated categories
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_article_categories_add(article_id, categories, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int article_id: Article unique identifier (required)
        :param CategoriesCreator categories: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_article_categories_add_with_http_info(article_id, categories, **kwargs)
        else:
            (data) = self.private_article_categories_add_with_http_info(article_id, categories, **kwargs)
            return data

    def private_article_categories_add_with_http_info(self, article_id, categories, **kwargs):
        """
        Add article categories
        Associate new categories with the article. This will add new categories to the list of already associated categories
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_article_categories_add_with_http_info(article_id, categories, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int article_id: Article unique identifier (required)
        :param CategoriesCreator categories: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id', 'categories']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_article_categories_add" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if ('article_id' not in params) or (params['article_id'] is None):
            raise ValueError("Missing the required parameter `article_id` when calling `private_article_categories_add`")
        # verify the required parameter 'categories' is set
        if ('categories' not in params) or (params['categories'] is None):
            raise ValueError("Missing the required parameter `categories` when calling `private_article_categories_add`")

        if 'article_id' in params and params['article_id'] < 1:
            raise ValueError("Invalid value for parameter `article_id` when calling `private_article_categories_add`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'categories' in params:
            body_params = params['categories']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/articles/{article_id}/categories', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_article_categories_list(self, article_id, **kwargs):
        """
        List article categories
        List article categories
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_article_categories_list(article_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int article_id: Article unique identifier (required)
        :return: list[Category]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_article_categories_list_with_http_info(article_id, **kwargs)
        else:
            (data) = self.private_article_categories_list_with_http_info(article_id, **kwargs)
            return data

    def private_article_categories_list_with_http_info(self, article_id, **kwargs):
        """
        List article categories
        List article categories
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_article_categories_list_with_http_info(article_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int article_id: Article unique identifier (required)
        :return: list[Category]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_article_categories_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if ('article_id' not in params) or (params['article_id'] is None):
            raise ValueError("Missing the required parameter `article_id` when calling `private_article_categories_list`")

        if 'article_id' in params and params['article_id'] < 1:
            raise ValueError("Invalid value for parameter `article_id` when calling `private_article_categories_list`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/articles/{article_id}/categories', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[Category]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_article_categories_replace(self, article_id, categories, **kwargs):
        """
        Replace article categories
        Associate new categories with the article. This will remove all already associated categories and add these new ones
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_article_categories_replace(article_id, categories, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int article_id: Article unique identifier (required)
        :param CategoriesCreator categories: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_article_categories_replace_with_http_info(article_id, categories, **kwargs)
        else:
            (data) = self.private_article_categories_replace_with_http_info(article_id, categories, **kwargs)
            return data

    def private_article_categories_replace_with_http_info(self, article_id, categories, **kwargs):
        """
        Replace article categories
        Associate new categories with the article. This will remove all already associated categories and add these new ones
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_article_categories_replace_with_http_info(article_id, categories, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int article_id: Article unique identifier (required)
        :param CategoriesCreator categories: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id', 'categories']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_article_categories_replace" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if ('article_id' not in params) or (params['article_id'] is None):
            raise ValueError("Missing the required parameter `article_id` when calling `private_article_categories_replace`")
        # verify the required parameter 'categories' is set
        if ('categories' not in params) or (params['categories'] is None):
            raise ValueError("Missing the required parameter `categories` when calling `private_article_categories_replace`")

        if 'article_id' in params and params['article_id'] < 1:
            raise ValueError("Invalid value for parameter `article_id` when calling `private_article_categories_replace`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'categories' in params:
            body_params = params['categories']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/articles/{article_id}/categories', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_article_category_delete(self, article_id, category_id, **kwargs):
        """
        Delete article category
        De-associate category from article
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_article_category_delete(article_id, category_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int article_id: Article unique identifier (required)
        :param int category_id: Category unique identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_article_category_delete_with_http_info(article_id, category_id, **kwargs)
        else:
            (data) = self.private_article_category_delete_with_http_info(article_id, category_id, **kwargs)
            return data

    def private_article_category_delete_with_http_info(self, article_id, category_id, **kwargs):
        """
        Delete article category
        De-associate category from article
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_article_category_delete_with_http_info(article_id, category_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int article_id: Article unique identifier (required)
        :param int category_id: Category unique identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id', 'category_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_article_category_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if ('article_id' not in params) or (params['article_id'] is None):
            raise ValueError("Missing the required parameter `article_id` when calling `private_article_category_delete`")
        # verify the required parameter 'category_id' is set
        if ('category_id' not in params) or (params['category_id'] is None):
            raise ValueError("Missing the required parameter `category_id` when calling `private_article_category_delete`")

        if 'article_id' in params and params['article_id'] < 1:
            raise ValueError("Invalid value for parameter `article_id` when calling `private_article_category_delete`, must be a value greater than or equal to `1`")
        if 'category_id' in params and params['category_id'] < 1:
            raise ValueError("Invalid value for parameter `category_id` when calling `private_article_category_delete`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']
        if 'category_id' in params:
            path_params['category_id'] = params['category_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/articles/{article_id}/categories/{category_id}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_article_confidentiality_delete(self, article_id, **kwargs):
        """
        Delete article confidentiality
        Delete confidentiality settings. The confidentiality feature is now deprecated. This has been replaced by the new extended embargo functionality and all items that used to be confidential have now been migrated to items with a permanent embargo on files. All API endpoints related to this functionality will remain for backwards compatibility, but will now be attached to the new extended embargo workflows.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_article_confidentiality_delete(article_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int article_id: Article unique identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_article_confidentiality_delete_with_http_info(article_id, **kwargs)
        else:
            (data) = self.private_article_confidentiality_delete_with_http_info(article_id, **kwargs)
            return data

    def private_article_confidentiality_delete_with_http_info(self, article_id, **kwargs):
        """
        Delete article confidentiality
        Delete confidentiality settings. The confidentiality feature is now deprecated. This has been replaced by the new extended embargo functionality and all items that used to be confidential have now been migrated to items with a permanent embargo on files. All API endpoints related to this functionality will remain for backwards compatibility, but will now be attached to the new extended embargo workflows.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_article_confidentiality_delete_with_http_info(article_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int article_id: Article unique identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_article_confidentiality_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if ('article_id' not in params) or (params['article_id'] is None):
            raise ValueError("Missing the required parameter `article_id` when calling `private_article_confidentiality_delete`")

        if 'article_id' in params and params['article_id'] < 1:
            raise ValueError("Invalid value for parameter `article_id` when calling `private_article_confidentiality_delete`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/articles/{article_id}/confidentiality', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_article_confidentiality_details(self, article_id, **kwargs):
        """
        Article confidentiality details
        View confidentiality settings. The confidentiality feature is now deprecated. This has been replaced by the new extended embargo functionality and all items that used to be confidential have now been migrated to items with a permanent embargo on files. All API endpoints related to this functionality will remain for backwards compatibility, but will now be attached to the new extended embargo workflows.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_article_confidentiality_details(article_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int article_id: Article unique identifier (required)
        :return: ArticleConfidentiality
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_article_confidentiality_details_with_http_info(article_id, **kwargs)
        else:
            (data) = self.private_article_confidentiality_details_with_http_info(article_id, **kwargs)
            return data

    def private_article_confidentiality_details_with_http_info(self, article_id, **kwargs):
        """
        Article confidentiality details
        View confidentiality settings. The confidentiality feature is now deprecated. This has been replaced by the new extended embargo functionality and all items that used to be confidential have now been migrated to items with a permanent embargo on files. All API endpoints related to this functionality will remain for backwards compatibility, but will now be attached to the new extended embargo workflows.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_article_confidentiality_details_with_http_info(article_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int article_id: Article unique identifier (required)
        :return: ArticleConfidentiality
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_article_confidentiality_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if ('article_id' not in params) or (params['article_id'] is None):
            raise ValueError("Missing the required parameter `article_id` when calling `private_article_confidentiality_details`")

        if 'article_id' in params and params['article_id'] < 1:
            raise ValueError("Invalid value for parameter `article_id` when calling `private_article_confidentiality_details`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/articles/{article_id}/confidentiality', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ArticleConfidentiality',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_article_confidentiality_update(self, article_id, reason, **kwargs):
        """
        Update article confidentiality
        Update confidentiality settings. The confidentiality feature is now deprecated. This has been replaced by the new extended embargo functionality and all items that used to be confidential have now been migrated to items with a permanent embargo on files. All API endpoints related to this functionality will remain for backwards compatibility, but will now be attached to the new extended embargo workflows.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_article_confidentiality_update(article_id, reason, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int article_id: Article unique identifier (required)
        :param ConfidentialityCreator reason: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_article_confidentiality_update_with_http_info(article_id, reason, **kwargs)
        else:
            (data) = self.private_article_confidentiality_update_with_http_info(article_id, reason, **kwargs)
            return data

    def private_article_confidentiality_update_with_http_info(self, article_id, reason, **kwargs):
        """
        Update article confidentiality
        Update confidentiality settings. The confidentiality feature is now deprecated. This has been replaced by the new extended embargo functionality and all items that used to be confidential have now been migrated to items with a permanent embargo on files. All API endpoints related to this functionality will remain for backwards compatibility, but will now be attached to the new extended embargo workflows.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_article_confidentiality_update_with_http_info(article_id, reason, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int article_id: Article unique identifier (required)
        :param ConfidentialityCreator reason: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id', 'reason']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_article_confidentiality_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if ('article_id' not in params) or (params['article_id'] is None):
            raise ValueError("Missing the required parameter `article_id` when calling `private_article_confidentiality_update`")
        # verify the required parameter 'reason' is set
        if ('reason' not in params) or (params['reason'] is None):
            raise ValueError("Missing the required parameter `reason` when calling `private_article_confidentiality_update`")

        if 'article_id' in params and params['article_id'] < 1:
            raise ValueError("Invalid value for parameter `article_id` when calling `private_article_confidentiality_update`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'reason' in params:
            body_params = params['reason']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/articles/{article_id}/confidentiality', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_article_create(self, article, **kwargs):
        """
        Create new Article
        Create a new Article by sending article information
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_article_create(article, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ArticleCreate article: Article description (required)
        :return: LocationWarnings
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_article_create_with_http_info(article, **kwargs)
        else:
            (data) = self.private_article_create_with_http_info(article, **kwargs)
            return data

    def private_article_create_with_http_info(self, article, **kwargs):
        """
        Create new Article
        Create a new Article by sending article information
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_article_create_with_http_info(article, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ArticleCreate article: Article description (required)
        :return: LocationWarnings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_article_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article' is set
        if ('article' not in params) or (params['article'] is None):
            raise ValueError("Missing the required parameter `article` when calling `private_article_create`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'article' in params:
            body_params = params['article']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/articles', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='LocationWarnings',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_article_delete(self, article_id, **kwargs):
        """
        Delete article
        Delete an article
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_article_delete(article_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int article_id: Article unique identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_article_delete_with_http_info(article_id, **kwargs)
        else:
            (data) = self.private_article_delete_with_http_info(article_id, **kwargs)
            return data

    def private_article_delete_with_http_info(self, article_id, **kwargs):
        """
        Delete article
        Delete an article
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_article_delete_with_http_info(article_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int article_id: Article unique identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_article_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if ('article_id' not in params) or (params['article_id'] is None):
            raise ValueError("Missing the required parameter `article_id` when calling `private_article_delete`")

        if 'article_id' in params and params['article_id'] < 1:
            raise ValueError("Invalid value for parameter `article_id` when calling `private_article_delete`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/articles/{article_id}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_article_details(self, article_id, **kwargs):
        """
        Article details
        View a private article
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_article_details(article_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int article_id: Article unique identifier (required)
        :return: ArticleCompletePrivate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_article_details_with_http_info(article_id, **kwargs)
        else:
            (data) = self.private_article_details_with_http_info(article_id, **kwargs)
            return data

    def private_article_details_with_http_info(self, article_id, **kwargs):
        """
        Article details
        View a private article
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_article_details_with_http_info(article_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int article_id: Article unique identifier (required)
        :return: ArticleCompletePrivate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_article_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if ('article_id' not in params) or (params['article_id'] is None):
            raise ValueError("Missing the required parameter `article_id` when calling `private_article_details`")

        if 'article_id' in params and params['article_id'] < 1:
            raise ValueError("Invalid value for parameter `article_id` when calling `private_article_details`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/articles/{article_id}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ArticleCompletePrivate',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_article_embargo_delete(self, article_id, **kwargs):
        """
        Delete Article Embargo
        Will lift the embargo for the specified article
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_article_embargo_delete(article_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int article_id: Article unique identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_article_embargo_delete_with_http_info(article_id, **kwargs)
        else:
            (data) = self.private_article_embargo_delete_with_http_info(article_id, **kwargs)
            return data

    def private_article_embargo_delete_with_http_info(self, article_id, **kwargs):
        """
        Delete Article Embargo
        Will lift the embargo for the specified article
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_article_embargo_delete_with_http_info(article_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int article_id: Article unique identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_article_embargo_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if ('article_id' not in params) or (params['article_id'] is None):
            raise ValueError("Missing the required parameter `article_id` when calling `private_article_embargo_delete`")

        if 'article_id' in params and params['article_id'] < 1:
            raise ValueError("Invalid value for parameter `article_id` when calling `private_article_embargo_delete`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/articles/{article_id}/embargo', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_article_embargo_details(self, article_id, **kwargs):
        """
        Article Embargo Details
        View a private article embargo details
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_article_embargo_details(article_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int article_id: Article unique identifier (required)
        :return: ArticleEmbargo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_article_embargo_details_with_http_info(article_id, **kwargs)
        else:
            (data) = self.private_article_embargo_details_with_http_info(article_id, **kwargs)
            return data

    def private_article_embargo_details_with_http_info(self, article_id, **kwargs):
        """
        Article Embargo Details
        View a private article embargo details
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_article_embargo_details_with_http_info(article_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int article_id: Article unique identifier (required)
        :return: ArticleEmbargo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_article_embargo_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if ('article_id' not in params) or (params['article_id'] is None):
            raise ValueError("Missing the required parameter `article_id` when calling `private_article_embargo_details`")

        if 'article_id' in params and params['article_id'] < 1:
            raise ValueError("Invalid value for parameter `article_id` when calling `private_article_embargo_details`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/articles/{article_id}/embargo', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ArticleEmbargo',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_article_embargo_update(self, article_id, embargo, **kwargs):
        """
        Update Article Embargo
        Note: setting an article under whole embargo does not imply that the article will be published when the embargo will expire. You must explicitly call the publish endpoint to enable this functionality.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_article_embargo_update(article_id, embargo, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int article_id: Article unique identifier (required)
        :param ArticleEmbargoUpdater embargo: Embargo description (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_article_embargo_update_with_http_info(article_id, embargo, **kwargs)
        else:
            (data) = self.private_article_embargo_update_with_http_info(article_id, embargo, **kwargs)
            return data

    def private_article_embargo_update_with_http_info(self, article_id, embargo, **kwargs):
        """
        Update Article Embargo
        Note: setting an article under whole embargo does not imply that the article will be published when the embargo will expire. You must explicitly call the publish endpoint to enable this functionality.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_article_embargo_update_with_http_info(article_id, embargo, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int article_id: Article unique identifier (required)
        :param ArticleEmbargoUpdater embargo: Embargo description (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id', 'embargo']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_article_embargo_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if ('article_id' not in params) or (params['article_id'] is None):
            raise ValueError("Missing the required parameter `article_id` when calling `private_article_embargo_update`")
        # verify the required parameter 'embargo' is set
        if ('embargo' not in params) or (params['embargo'] is None):
            raise ValueError("Missing the required parameter `embargo` when calling `private_article_embargo_update`")

        if 'article_id' in params and params['article_id'] < 1:
            raise ValueError("Invalid value for parameter `article_id` when calling `private_article_embargo_update`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'embargo' in params:
            body_params = params['embargo']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/articles/{article_id}/embargo', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_article_file(self, article_id, file_id, **kwargs):
        """
        Single File
        View details of file for specified article
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_article_file(article_id, file_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int article_id: Article unique identifier (required)
        :param int file_id: File unique identifier (required)
        :return: PrivateFile
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_article_file_with_http_info(article_id, file_id, **kwargs)
        else:
            (data) = self.private_article_file_with_http_info(article_id, file_id, **kwargs)
            return data

    def private_article_file_with_http_info(self, article_id, file_id, **kwargs):
        """
        Single File
        View details of file for specified article
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_article_file_with_http_info(article_id, file_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int article_id: Article unique identifier (required)
        :param int file_id: File unique identifier (required)
        :return: PrivateFile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id', 'file_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_article_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if ('article_id' not in params) or (params['article_id'] is None):
            raise ValueError("Missing the required parameter `article_id` when calling `private_article_file`")
        # verify the required parameter 'file_id' is set
        if ('file_id' not in params) or (params['file_id'] is None):
            raise ValueError("Missing the required parameter `file_id` when calling `private_article_file`")

        if 'article_id' in params and params['article_id'] < 1:
            raise ValueError("Invalid value for parameter `article_id` when calling `private_article_file`, must be a value greater than or equal to `1`")
        if 'file_id' in params and params['file_id'] < 1:
            raise ValueError("Invalid value for parameter `file_id` when calling `private_article_file`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']
        if 'file_id' in params:
            path_params['file_id'] = params['file_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/articles/{article_id}/files/{file_id}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PrivateFile',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_article_file_delete(self, article_id, file_id, **kwargs):
        """
        File Delete
        Complete file upload
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_article_file_delete(article_id, file_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int article_id: Article unique identifier (required)
        :param int file_id: File unique identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_article_file_delete_with_http_info(article_id, file_id, **kwargs)
        else:
            (data) = self.private_article_file_delete_with_http_info(article_id, file_id, **kwargs)
            return data

    def private_article_file_delete_with_http_info(self, article_id, file_id, **kwargs):
        """
        File Delete
        Complete file upload
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_article_file_delete_with_http_info(article_id, file_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int article_id: Article unique identifier (required)
        :param int file_id: File unique identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id', 'file_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_article_file_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if ('article_id' not in params) or (params['article_id'] is None):
            raise ValueError("Missing the required parameter `article_id` when calling `private_article_file_delete`")
        # verify the required parameter 'file_id' is set
        if ('file_id' not in params) or (params['file_id'] is None):
            raise ValueError("Missing the required parameter `file_id` when calling `private_article_file_delete`")

        if 'article_id' in params and params['article_id'] < 1:
            raise ValueError("Invalid value for parameter `article_id` when calling `private_article_file_delete`, must be a value greater than or equal to `1`")
        if 'file_id' in params and params['file_id'] < 1:
            raise ValueError("Invalid value for parameter `file_id` when calling `private_article_file_delete`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']
        if 'file_id' in params:
            path_params['file_id'] = params['file_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/articles/{article_id}/files/{file_id}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_article_files_list(self, article_id, **kwargs):
        """
        List article files
        List private files
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_article_files_list(article_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int article_id: Article unique identifier (required)
        :return: list[PrivateFile]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_article_files_list_with_http_info(article_id, **kwargs)
        else:
            (data) = self.private_article_files_list_with_http_info(article_id, **kwargs)
            return data

    def private_article_files_list_with_http_info(self, article_id, **kwargs):
        """
        List article files
        List private files
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_article_files_list_with_http_info(article_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int article_id: Article unique identifier (required)
        :return: list[PrivateFile]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_article_files_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if ('article_id' not in params) or (params['article_id'] is None):
            raise ValueError("Missing the required parameter `article_id` when calling `private_article_files_list`")

        if 'article_id' in params and params['article_id'] < 1:
            raise ValueError("Invalid value for parameter `article_id` when calling `private_article_files_list`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/articles/{article_id}/files', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[PrivateFile]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_article_private_link(self, article_id, **kwargs):
        """
        List private links
        List private links
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_article_private_link(article_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int article_id: Article unique identifier (required)
        :return: list[PrivateLink]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_article_private_link_with_http_info(article_id, **kwargs)
        else:
            (data) = self.private_article_private_link_with_http_info(article_id, **kwargs)
            return data

    def private_article_private_link_with_http_info(self, article_id, **kwargs):
        """
        List private links
        List private links
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_article_private_link_with_http_info(article_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int article_id: Article unique identifier (required)
        :return: list[PrivateLink]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_article_private_link" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if ('article_id' not in params) or (params['article_id'] is None):
            raise ValueError("Missing the required parameter `article_id` when calling `private_article_private_link`")

        if 'article_id' in params and params['article_id'] < 1:
            raise ValueError("Invalid value for parameter `article_id` when calling `private_article_private_link`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/articles/{article_id}/private_links', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[PrivateLink]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_article_private_link_create(self, article_id, **kwargs):
        """
        Create private link
        Create new private link for this article
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_article_private_link_create(article_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int article_id: Article unique identifier (required)
        :param PrivateLinkCreator private_link:
        :return: PrivateLinkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_article_private_link_create_with_http_info(article_id, **kwargs)
        else:
            (data) = self.private_article_private_link_create_with_http_info(article_id, **kwargs)
            return data

    def private_article_private_link_create_with_http_info(self, article_id, **kwargs):
        """
        Create private link
        Create new private link for this article
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_article_private_link_create_with_http_info(article_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int article_id: Article unique identifier (required)
        :param PrivateLinkCreator private_link:
        :return: PrivateLinkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id', 'private_link']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_article_private_link_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if ('article_id' not in params) or (params['article_id'] is None):
            raise ValueError("Missing the required parameter `article_id` when calling `private_article_private_link_create`")

        if 'article_id' in params and params['article_id'] < 1:
            raise ValueError("Invalid value for parameter `article_id` when calling `private_article_private_link_create`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'private_link' in params:
            body_params = params['private_link']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/articles/{article_id}/private_links', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PrivateLinkResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_article_private_link_delete(self, article_id, link_id, **kwargs):
        """
        Disable private link
        Disable/delete private link for this article
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_article_private_link_delete(article_id, link_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int article_id: Article unique identifier (required)
        :param str link_id: Private link token (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_article_private_link_delete_with_http_info(article_id, link_id, **kwargs)
        else:
            (data) = self.private_article_private_link_delete_with_http_info(article_id, link_id, **kwargs)
            return data

    def private_article_private_link_delete_with_http_info(self, article_id, link_id, **kwargs):
        """
        Disable private link
        Disable/delete private link for this article
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_article_private_link_delete_with_http_info(article_id, link_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int article_id: Article unique identifier (required)
        :param str link_id: Private link token (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id', 'link_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_article_private_link_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if ('article_id' not in params) or (params['article_id'] is None):
            raise ValueError("Missing the required parameter `article_id` when calling `private_article_private_link_delete`")
        # verify the required parameter 'link_id' is set
        if ('link_id' not in params) or (params['link_id'] is None):
            raise ValueError("Missing the required parameter `link_id` when calling `private_article_private_link_delete`")

        if 'article_id' in params and params['article_id'] < 1:
            raise ValueError("Invalid value for parameter `article_id` when calling `private_article_private_link_delete`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']
        if 'link_id' in params:
            path_params['link_id'] = params['link_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/articles/{article_id}/private_links/{link_id}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_article_private_link_update(self, article_id, link_id, **kwargs):
        """
        Update private link
        Update existing private link for this article
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_article_private_link_update(article_id, link_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int article_id: Article unique identifier (required)
        :param str link_id: Private link token (required)
        :param PrivateLinkCreator private_link:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_article_private_link_update_with_http_info(article_id, link_id, **kwargs)
        else:
            (data) = self.private_article_private_link_update_with_http_info(article_id, link_id, **kwargs)
            return data

    def private_article_private_link_update_with_http_info(self, article_id, link_id, **kwargs):
        """
        Update private link
        Update existing private link for this article
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_article_private_link_update_with_http_info(article_id, link_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int article_id: Article unique identifier (required)
        :param str link_id: Private link token (required)
        :param PrivateLinkCreator private_link:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id', 'link_id', 'private_link']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_article_private_link_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if ('article_id' not in params) or (params['article_id'] is None):
            raise ValueError("Missing the required parameter `article_id` when calling `private_article_private_link_update`")
        # verify the required parameter 'link_id' is set
        if ('link_id' not in params) or (params['link_id'] is None):
            raise ValueError("Missing the required parameter `link_id` when calling `private_article_private_link_update`")

        if 'article_id' in params and params['article_id'] < 1:
            raise ValueError("Invalid value for parameter `article_id` when calling `private_article_private_link_update`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']
        if 'link_id' in params:
            path_params['link_id'] = params['link_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'private_link' in params:
            body_params = params['private_link']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/articles/{article_id}/private_links/{link_id}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_article_publish(self, article_id, **kwargs):
        """
        Private Article Publish
        - If the whole article is under embargo, it will not be published immediately, but when the embargo expires or is lifted. - When an article is published, a new public version will be generated. Any further updates to the article will affect the private article data. In order to make these changes publicly visible, an explicit publish operation is needed.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_article_publish(article_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int article_id: Article unique identifier (required)
        :return: Location
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_article_publish_with_http_info(article_id, **kwargs)
        else:
            (data) = self.private_article_publish_with_http_info(article_id, **kwargs)
            return data

    def private_article_publish_with_http_info(self, article_id, **kwargs):
        """
        Private Article Publish
        - If the whole article is under embargo, it will not be published immediately, but when the embargo expires or is lifted. - When an article is published, a new public version will be generated. Any further updates to the article will affect the private article data. In order to make these changes publicly visible, an explicit publish operation is needed.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_article_publish_with_http_info(article_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int article_id: Article unique identifier (required)
        :return: Location
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_article_publish" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if ('article_id' not in params) or (params['article_id'] is None):
            raise ValueError("Missing the required parameter `article_id` when calling `private_article_publish`")

        if 'article_id' in params and params['article_id'] < 1:
            raise ValueError("Invalid value for parameter `article_id` when calling `private_article_publish`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/articles/{article_id}/publish', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Location',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_article_reserve_doi(self, article_id, **kwargs):
        """
        Private Article Reserve DOI
        Reserve DOI for article
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_article_reserve_doi(article_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int article_id: Article unique identifier (required)
        :return: ArticleDOI
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_article_reserve_doi_with_http_info(article_id, **kwargs)
        else:
            (data) = self.private_article_reserve_doi_with_http_info(article_id, **kwargs)
            return data

    def private_article_reserve_doi_with_http_info(self, article_id, **kwargs):
        """
        Private Article Reserve DOI
        Reserve DOI for article
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_article_reserve_doi_with_http_info(article_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int article_id: Article unique identifier (required)
        :return: ArticleDOI
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_article_reserve_doi" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if ('article_id' not in params) or (params['article_id'] is None):
            raise ValueError("Missing the required parameter `article_id` when calling `private_article_reserve_doi`")

        if 'article_id' in params and params['article_id'] < 1:
            raise ValueError("Invalid value for parameter `article_id` when calling `private_article_reserve_doi`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/articles/{article_id}/reserve_doi', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ArticleDOI',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_article_reserve_handle(self, article_id, **kwargs):
        """
        Private Article Reserve Handle
        Reserve Handle for article
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_article_reserve_handle(article_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int article_id: Article unique identifier (required)
        :return: ArticleHandle
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_article_reserve_handle_with_http_info(article_id, **kwargs)
        else:
            (data) = self.private_article_reserve_handle_with_http_info(article_id, **kwargs)
            return data

    def private_article_reserve_handle_with_http_info(self, article_id, **kwargs):
        """
        Private Article Reserve Handle
        Reserve Handle for article
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_article_reserve_handle_with_http_info(article_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int article_id: Article unique identifier (required)
        :return: ArticleHandle
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_article_reserve_handle" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if ('article_id' not in params) or (params['article_id'] is None):
            raise ValueError("Missing the required parameter `article_id` when calling `private_article_reserve_handle`")

        if 'article_id' in params and params['article_id'] < 1:
            raise ValueError("Invalid value for parameter `article_id` when calling `private_article_reserve_handle`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/articles/{article_id}/reserve_handle', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ArticleHandle',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_article_resource(self, article_id, resource, **kwargs):
        """
        Private Article Resource
        Edit article resource data.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_article_resource(article_id, resource, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int article_id: Article unique identifier (required)
        :param Resource resource: Resource data (required)
        :return: Location
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_article_resource_with_http_info(article_id, resource, **kwargs)
        else:
            (data) = self.private_article_resource_with_http_info(article_id, resource, **kwargs)
            return data

    def private_article_resource_with_http_info(self, article_id, resource, **kwargs):
        """
        Private Article Resource
        Edit article resource data.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_article_resource_with_http_info(article_id, resource, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int article_id: Article unique identifier (required)
        :param Resource resource: Resource data (required)
        :return: Location
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id', 'resource']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_article_resource" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if ('article_id' not in params) or (params['article_id'] is None):
            raise ValueError("Missing the required parameter `article_id` when calling `private_article_resource`")
        # verify the required parameter 'resource' is set
        if ('resource' not in params) or (params['resource'] is None):
            raise ValueError("Missing the required parameter `resource` when calling `private_article_resource`")

        if 'article_id' in params and params['article_id'] < 1:
            raise ValueError("Invalid value for parameter `article_id` when calling `private_article_resource`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'resource' in params:
            body_params = params['resource']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/articles/{article_id}/resource', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Location',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_article_update(self, article_id, article, **kwargs):
        """
        Update article
        Updating an article by passing body parameters; request can also be made with the PATCH method.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_article_update(article_id, article, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int article_id: Article unique identifier (required)
        :param ArticleUpdate article: Article description (required)
        :return: LocationWarningsUpdate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_article_update_with_http_info(article_id, article, **kwargs)
        else:
            (data) = self.private_article_update_with_http_info(article_id, article, **kwargs)
            return data

    def private_article_update_with_http_info(self, article_id, article, **kwargs):
        """
        Update article
        Updating an article by passing body parameters; request can also be made with the PATCH method.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_article_update_with_http_info(article_id, article, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int article_id: Article unique identifier (required)
        :param ArticleUpdate article: Article description (required)
        :return: LocationWarningsUpdate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id', 'article']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_article_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if ('article_id' not in params) or (params['article_id'] is None):
            raise ValueError("Missing the required parameter `article_id` when calling `private_article_update`")
        # verify the required parameter 'article' is set
        if ('article' not in params) or (params['article'] is None):
            raise ValueError("Missing the required parameter `article` when calling `private_article_update`")

        if 'article_id' in params and params['article_id'] < 1:
            raise ValueError("Invalid value for parameter `article_id` when calling `private_article_update`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'article' in params:
            body_params = params['article']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/articles/{article_id}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='LocationWarningsUpdate',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_article_upload_complete(self, article_id, file_id, **kwargs):
        """
        Complete Upload
        Complete file upload
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_article_upload_complete(article_id, file_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int article_id: Article unique identifier (required)
        :param int file_id: File unique identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_article_upload_complete_with_http_info(article_id, file_id, **kwargs)
        else:
            (data) = self.private_article_upload_complete_with_http_info(article_id, file_id, **kwargs)
            return data

    def private_article_upload_complete_with_http_info(self, article_id, file_id, **kwargs):
        """
        Complete Upload
        Complete file upload
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_article_upload_complete_with_http_info(article_id, file_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int article_id: Article unique identifier (required)
        :param int file_id: File unique identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id', 'file_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_article_upload_complete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if ('article_id' not in params) or (params['article_id'] is None):
            raise ValueError("Missing the required parameter `article_id` when calling `private_article_upload_complete`")
        # verify the required parameter 'file_id' is set
        if ('file_id' not in params) or (params['file_id'] is None):
            raise ValueError("Missing the required parameter `file_id` when calling `private_article_upload_complete`")

        if 'article_id' in params and params['article_id'] < 1:
            raise ValueError("Invalid value for parameter `article_id` when calling `private_article_upload_complete`, must be a value greater than or equal to `1`")
        if 'file_id' in params and params['file_id'] < 1:
            raise ValueError("Invalid value for parameter `file_id` when calling `private_article_upload_complete`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']
        if 'file_id' in params:
            path_params['file_id'] = params['file_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/articles/{article_id}/files/{file_id}', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_article_upload_initiate(self, article_id, file, **kwargs):
        """
        Initiate Upload
        Initiate a new file upload within the article. Either use the link property to point to an existing file that resides elsewhere and will not be uploaded to Figshare or use the other 3 parameters (md5, name, size).
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_article_upload_initiate(article_id, file, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int article_id: Article unique identifier (required)
        :param FileCreator file: (required)
        :return: Location
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_article_upload_initiate_with_http_info(article_id, file, **kwargs)
        else:
            (data) = self.private_article_upload_initiate_with_http_info(article_id, file, **kwargs)
            return data

    def private_article_upload_initiate_with_http_info(self, article_id, file, **kwargs):
        """
        Initiate Upload
        Initiate a new file upload within the article. Either use the link property to point to an existing file that resides elsewhere and will not be uploaded to Figshare or use the other 3 parameters (md5, name, size).
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_article_upload_initiate_with_http_info(article_id, file, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int article_id: Article unique identifier (required)
        :param FileCreator file: (required)
        :return: Location
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id', 'file']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_article_upload_initiate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if ('article_id' not in params) or (params['article_id'] is None):
            raise ValueError("Missing the required parameter `article_id` when calling `private_article_upload_initiate`")
        # verify the required parameter 'file' is set
        if ('file' not in params) or (params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `private_article_upload_initiate`")

        if 'article_id' in params and params['article_id'] < 1:
            raise ValueError("Invalid value for parameter `article_id` when calling `private_article_upload_initiate`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'file' in params:
            body_params = params['file']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/articles/{article_id}/files', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Location',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_articles_list(self, **kwargs):
        """
        Private Articles
        Get Own Articles
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_articles_list(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page: Page number. Used for pagination with page_size
        :param int page_size: The number of results included on a page. Used for pagination with page
        :param int limit: Number of results included on a page. Used for pagination with query
        :param int offset: Where to start the listing(the offset of the first result). Used for pagination with limit
        :return: list[Article]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_articles_list_with_http_info(**kwargs)
        else:
            (data) = self.private_articles_list_with_http_info(**kwargs)
            return data

    def private_articles_list_with_http_info(self, **kwargs):
        """
        Private Articles
        Get Own Articles
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_articles_list_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page: Page number. Used for pagination with page_size
        :param int page_size: The number of results included on a page. Used for pagination with page
        :param int limit: Number of results included on a page. Used for pagination with query
        :param int offset: Where to start the listing(the offset of the first result). Used for pagination with limit
        :return: list[Article]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'page_size', 'limit', 'offset']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_articles_list" % key
                )
            params[key] = val
        del params['kwargs']

        if 'page' in params and params['page'] > 5000:
            raise ValueError("Invalid value for parameter `page` when calling `private_articles_list`, must be a value less than or equal to `5000`")
        if 'page' in params and params['page'] < 1:
            raise ValueError("Invalid value for parameter `page` when calling `private_articles_list`, must be a value greater than or equal to `1`")
        if 'page_size' in params and params['page_size'] > 1000:
            raise ValueError("Invalid value for parameter `page_size` when calling `private_articles_list`, must be a value less than or equal to `1000`")
        if 'page_size' in params and params['page_size'] < 1:
            raise ValueError("Invalid value for parameter `page_size` when calling `private_articles_list`, must be a value greater than or equal to `1`")
        if 'limit' in params and params['limit'] > 1000:
            raise ValueError("Invalid value for parameter `limit` when calling `private_articles_list`, must be a value less than or equal to `1000`")
        if 'limit' in params and params['limit'] < 1:
            raise ValueError("Invalid value for parameter `limit` when calling `private_articles_list`, must be a value greater than or equal to `1`")
        if 'offset' in params and params['offset'] > 5000:
            raise ValueError("Invalid value for parameter `offset` when calling `private_articles_list`, must be a value less than or equal to `5000`")
        if 'offset' in params and params['offset'] < 0:
            raise ValueError("Invalid value for parameter `offset` when calling `private_articles_list`, must be a value greater than or equal to `0`")

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))
        if 'limit' in params:
            query_params.append(('limit', params['limit']))
        if 'offset' in params:
            query_params.append(('offset', params['offset']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/articles', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[Article]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_articles_search(self, search, **kwargs):
        """
        Private Articles search
        Returns a list of private articles filtered by the search parameters
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_articles_search(search, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param PrivateArticleSearch search: Search Parameters (required)
        :return: list[ArticleWithProject]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_articles_search_with_http_info(search, **kwargs)
        else:
            (data) = self.private_articles_search_with_http_info(search, **kwargs)
            return data

    def private_articles_search_with_http_info(self, search, **kwargs):
        """
        Private Articles search
        Returns a list of private articles filtered by the search parameters
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_articles_search_with_http_info(search, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param PrivateArticleSearch search: Search Parameters (required)
        :return: list[ArticleWithProject]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['search']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_articles_search" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'search' is set
        if ('search' not in params) or (params['search'] is None):
            raise ValueError("Missing the required parameter `search` when calling `private_articles_search`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'search' in params:
            body_params = params['search']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/articles/search', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[ArticleWithProject]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
