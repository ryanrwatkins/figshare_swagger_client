# coding: utf-8

"""
    Figshare API

    Figshare apiv2. Using Swagger 2.0

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class ProjectsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def private_project_article_delete(self, project_id, article_id, **kwargs):
        """
        Delete project article
        Delete project article
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_project_article_delete(project_id, article_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: Project unique identifier (required)
        :param int article_id: Project Article unique identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_project_article_delete_with_http_info(project_id, article_id, **kwargs)
        else:
            (data) = self.private_project_article_delete_with_http_info(project_id, article_id, **kwargs)
            return data

    def private_project_article_delete_with_http_info(self, project_id, article_id, **kwargs):
        """
        Delete project article
        Delete project article
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_project_article_delete_with_http_info(project_id, article_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: Project unique identifier (required)
        :param int article_id: Project Article unique identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'article_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_project_article_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params) or (params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `private_project_article_delete`")
        # verify the required parameter 'article_id' is set
        if ('article_id' not in params) or (params['article_id'] is None):
            raise ValueError("Missing the required parameter `article_id` when calling `private_project_article_delete`")

        if 'project_id' in params and params['project_id'] < 1:
            raise ValueError("Invalid value for parameter `project_id` when calling `private_project_article_delete`, must be a value greater than or equal to `1`")
        if 'article_id' in params and params['article_id'] < 1:
            raise ValueError("Invalid value for parameter `article_id` when calling `private_project_article_delete`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/projects/{project_id}/articles/{article_id}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_project_article_details(self, project_id, article_id, **kwargs):
        """
        Project article details
        Project article details
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_project_article_details(project_id, article_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: Project unique identifier (required)
        :param int article_id: Project Article unique identifier (required)
        :return: ProjectArticle
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_project_article_details_with_http_info(project_id, article_id, **kwargs)
        else:
            (data) = self.private_project_article_details_with_http_info(project_id, article_id, **kwargs)
            return data

    def private_project_article_details_with_http_info(self, project_id, article_id, **kwargs):
        """
        Project article details
        Project article details
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_project_article_details_with_http_info(project_id, article_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: Project unique identifier (required)
        :param int article_id: Project Article unique identifier (required)
        :return: ProjectArticle
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'article_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_project_article_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params) or (params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `private_project_article_details`")
        # verify the required parameter 'article_id' is set
        if ('article_id' not in params) or (params['article_id'] is None):
            raise ValueError("Missing the required parameter `article_id` when calling `private_project_article_details`")

        if 'project_id' in params and params['project_id'] < 1:
            raise ValueError("Invalid value for parameter `project_id` when calling `private_project_article_details`, must be a value greater than or equal to `1`")
        if 'article_id' in params and params['article_id'] < 1:
            raise ValueError("Invalid value for parameter `article_id` when calling `private_project_article_details`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/projects/{project_id}/articles/{article_id}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ProjectArticle',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_project_article_file(self, project_id, article_id, file_id, **kwargs):
        """
        Project article file details
        Project article file details
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_project_article_file(project_id, article_id, file_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: Project unique identifier (required)
        :param int article_id: Project Article unique identifier (required)
        :param int file_id: File unique identifier (required)
        :return: PrivateFile
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_project_article_file_with_http_info(project_id, article_id, file_id, **kwargs)
        else:
            (data) = self.private_project_article_file_with_http_info(project_id, article_id, file_id, **kwargs)
            return data

    def private_project_article_file_with_http_info(self, project_id, article_id, file_id, **kwargs):
        """
        Project article file details
        Project article file details
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_project_article_file_with_http_info(project_id, article_id, file_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: Project unique identifier (required)
        :param int article_id: Project Article unique identifier (required)
        :param int file_id: File unique identifier (required)
        :return: PrivateFile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'article_id', 'file_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_project_article_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params) or (params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `private_project_article_file`")
        # verify the required parameter 'article_id' is set
        if ('article_id' not in params) or (params['article_id'] is None):
            raise ValueError("Missing the required parameter `article_id` when calling `private_project_article_file`")
        # verify the required parameter 'file_id' is set
        if ('file_id' not in params) or (params['file_id'] is None):
            raise ValueError("Missing the required parameter `file_id` when calling `private_project_article_file`")

        if 'project_id' in params and params['project_id'] < 1:
            raise ValueError("Invalid value for parameter `project_id` when calling `private_project_article_file`, must be a value greater than or equal to `1`")
        if 'article_id' in params and params['article_id'] < 1:
            raise ValueError("Invalid value for parameter `article_id` when calling `private_project_article_file`, must be a value greater than or equal to `1`")
        if 'file_id' in params and params['file_id'] < 1:
            raise ValueError("Invalid value for parameter `file_id` when calling `private_project_article_file`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']
        if 'file_id' in params:
            path_params['file_id'] = params['file_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/projects/{project_id}/articles/{article_id}/files/{file_id}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PrivateFile',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_project_article_files(self, project_id, article_id, **kwargs):
        """
        Project article list files
        List article files
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_project_article_files(project_id, article_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: Project unique identifier (required)
        :param int article_id: Project Article unique identifier (required)
        :return: list[PrivateFile]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_project_article_files_with_http_info(project_id, article_id, **kwargs)
        else:
            (data) = self.private_project_article_files_with_http_info(project_id, article_id, **kwargs)
            return data

    def private_project_article_files_with_http_info(self, project_id, article_id, **kwargs):
        """
        Project article list files
        List article files
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_project_article_files_with_http_info(project_id, article_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: Project unique identifier (required)
        :param int article_id: Project Article unique identifier (required)
        :return: list[PrivateFile]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'article_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_project_article_files" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params) or (params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `private_project_article_files`")
        # verify the required parameter 'article_id' is set
        if ('article_id' not in params) or (params['article_id'] is None):
            raise ValueError("Missing the required parameter `article_id` when calling `private_project_article_files`")

        if 'project_id' in params and params['project_id'] < 1:
            raise ValueError("Invalid value for parameter `project_id` when calling `private_project_article_files`, must be a value greater than or equal to `1`")
        if 'article_id' in params and params['article_id'] < 1:
            raise ValueError("Invalid value for parameter `article_id` when calling `private_project_article_files`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/projects/{project_id}/articles/{article_id}/files', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[PrivateFile]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_project_articles_create(self, project_id, article, **kwargs):
        """
        Create project article
        Create a new Article and associate it with this project
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_project_articles_create(project_id, article, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: Project unique identifier (required)
        :param ArticleProjectCreate article: Article description (required)
        :param int page: Page number. Used for pagination with page_size
        :param int page_size: The number of results included on a page. Used for pagination with page
        :param int limit: Number of results included on a page. Used for pagination with query
        :param int offset: Where to start the listing(the offset of the first result). Used for pagination with limit
        :return: LocationWarnings
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_project_articles_create_with_http_info(project_id, article, **kwargs)
        else:
            (data) = self.private_project_articles_create_with_http_info(project_id, article, **kwargs)
            return data

    def private_project_articles_create_with_http_info(self, project_id, article, **kwargs):
        """
        Create project article
        Create a new Article and associate it with this project
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_project_articles_create_with_http_info(project_id, article, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: Project unique identifier (required)
        :param ArticleProjectCreate article: Article description (required)
        :param int page: Page number. Used for pagination with page_size
        :param int page_size: The number of results included on a page. Used for pagination with page
        :param int limit: Number of results included on a page. Used for pagination with query
        :param int offset: Where to start the listing(the offset of the first result). Used for pagination with limit
        :return: LocationWarnings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'article', 'page', 'page_size', 'limit', 'offset']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_project_articles_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params) or (params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `private_project_articles_create`")
        # verify the required parameter 'article' is set
        if ('article' not in params) or (params['article'] is None):
            raise ValueError("Missing the required parameter `article` when calling `private_project_articles_create`")

        if 'project_id' in params and params['project_id'] < 1:
            raise ValueError("Invalid value for parameter `project_id` when calling `private_project_articles_create`, must be a value greater than or equal to `1`")
        if 'page' in params and params['page'] > 5000:
            raise ValueError("Invalid value for parameter `page` when calling `private_project_articles_create`, must be a value less than or equal to `5000`")
        if 'page' in params and params['page'] < 1:
            raise ValueError("Invalid value for parameter `page` when calling `private_project_articles_create`, must be a value greater than or equal to `1`")
        if 'page_size' in params and params['page_size'] > 1000:
            raise ValueError("Invalid value for parameter `page_size` when calling `private_project_articles_create`, must be a value less than or equal to `1000`")
        if 'page_size' in params and params['page_size'] < 1:
            raise ValueError("Invalid value for parameter `page_size` when calling `private_project_articles_create`, must be a value greater than or equal to `1`")
        if 'limit' in params and params['limit'] > 1000:
            raise ValueError("Invalid value for parameter `limit` when calling `private_project_articles_create`, must be a value less than or equal to `1000`")
        if 'limit' in params and params['limit'] < 1:
            raise ValueError("Invalid value for parameter `limit` when calling `private_project_articles_create`, must be a value greater than or equal to `1`")
        if 'offset' in params and params['offset'] > 5000:
            raise ValueError("Invalid value for parameter `offset` when calling `private_project_articles_create`, must be a value less than or equal to `5000`")
        if 'offset' in params and params['offset'] < 0:
            raise ValueError("Invalid value for parameter `offset` when calling `private_project_articles_create`, must be a value greater than or equal to `0`")

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))
        if 'limit' in params:
            query_params.append(('limit', params['limit']))
        if 'offset' in params:
            query_params.append(('offset', params['offset']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'article' in params:
            body_params = params['article']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/projects/{project_id}/articles', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='LocationWarnings',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_project_articles_list(self, project_id, **kwargs):
        """
        List project articles
        List project articles
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_project_articles_list(project_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: Project unique identifier (required)
        :param int page: Page number. Used for pagination with page_size
        :param int page_size: The number of results included on a page. Used for pagination with page
        :param int limit: Number of results included on a page. Used for pagination with query
        :param int offset: Where to start the listing(the offset of the first result). Used for pagination with limit
        :return: list[Article]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_project_articles_list_with_http_info(project_id, **kwargs)
        else:
            (data) = self.private_project_articles_list_with_http_info(project_id, **kwargs)
            return data

    def private_project_articles_list_with_http_info(self, project_id, **kwargs):
        """
        List project articles
        List project articles
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_project_articles_list_with_http_info(project_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: Project unique identifier (required)
        :param int page: Page number. Used for pagination with page_size
        :param int page_size: The number of results included on a page. Used for pagination with page
        :param int limit: Number of results included on a page. Used for pagination with query
        :param int offset: Where to start the listing(the offset of the first result). Used for pagination with limit
        :return: list[Article]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'page', 'page_size', 'limit', 'offset']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_project_articles_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params) or (params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `private_project_articles_list`")

        if 'project_id' in params and params['project_id'] < 1:
            raise ValueError("Invalid value for parameter `project_id` when calling `private_project_articles_list`, must be a value greater than or equal to `1`")
        if 'page' in params and params['page'] > 5000:
            raise ValueError("Invalid value for parameter `page` when calling `private_project_articles_list`, must be a value less than or equal to `5000`")
        if 'page' in params and params['page'] < 1:
            raise ValueError("Invalid value for parameter `page` when calling `private_project_articles_list`, must be a value greater than or equal to `1`")
        if 'page_size' in params and params['page_size'] > 1000:
            raise ValueError("Invalid value for parameter `page_size` when calling `private_project_articles_list`, must be a value less than or equal to `1000`")
        if 'page_size' in params and params['page_size'] < 1:
            raise ValueError("Invalid value for parameter `page_size` when calling `private_project_articles_list`, must be a value greater than or equal to `1`")
        if 'limit' in params and params['limit'] > 1000:
            raise ValueError("Invalid value for parameter `limit` when calling `private_project_articles_list`, must be a value less than or equal to `1000`")
        if 'limit' in params and params['limit'] < 1:
            raise ValueError("Invalid value for parameter `limit` when calling `private_project_articles_list`, must be a value greater than or equal to `1`")
        if 'offset' in params and params['offset'] > 5000:
            raise ValueError("Invalid value for parameter `offset` when calling `private_project_articles_list`, must be a value less than or equal to `5000`")
        if 'offset' in params and params['offset'] < 0:
            raise ValueError("Invalid value for parameter `offset` when calling `private_project_articles_list`, must be a value greater than or equal to `0`")

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))
        if 'limit' in params:
            query_params.append(('limit', params['limit']))
        if 'offset' in params:
            query_params.append(('offset', params['offset']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/projects/{project_id}/articles', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[Article]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_project_collaborator_delete(self, project_id, user_id, **kwargs):
        """
        Remove project collaborator
        Remove project collaborator
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_project_collaborator_delete(project_id, user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: Project unique identifier (required)
        :param int user_id: User unique identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_project_collaborator_delete_with_http_info(project_id, user_id, **kwargs)
        else:
            (data) = self.private_project_collaborator_delete_with_http_info(project_id, user_id, **kwargs)
            return data

    def private_project_collaborator_delete_with_http_info(self, project_id, user_id, **kwargs):
        """
        Remove project collaborator
        Remove project collaborator
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_project_collaborator_delete_with_http_info(project_id, user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: Project unique identifier (required)
        :param int user_id: User unique identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'user_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_project_collaborator_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params) or (params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `private_project_collaborator_delete`")
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `private_project_collaborator_delete`")

        if 'project_id' in params and params['project_id'] < 1:
            raise ValueError("Invalid value for parameter `project_id` when calling `private_project_collaborator_delete`, must be a value greater than or equal to `1`")
        if 'user_id' in params and params['user_id'] < 1:
            raise ValueError("Invalid value for parameter `user_id` when calling `private_project_collaborator_delete`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/projects/{project_id}/collaborators/{user_id}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_project_collaborators_invite(self, project_id, collaborator, **kwargs):
        """
        Invite project collaborators
        Invite users to collaborate on project or view the project
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_project_collaborators_invite(project_id, collaborator, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: Project unique identifier (required)
        :param ProjectCollaboratorInvite collaborator: viewer or collaborator role. User user_id or email of user (required)
        :return: ResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_project_collaborators_invite_with_http_info(project_id, collaborator, **kwargs)
        else:
            (data) = self.private_project_collaborators_invite_with_http_info(project_id, collaborator, **kwargs)
            return data

    def private_project_collaborators_invite_with_http_info(self, project_id, collaborator, **kwargs):
        """
        Invite project collaborators
        Invite users to collaborate on project or view the project
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_project_collaborators_invite_with_http_info(project_id, collaborator, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: Project unique identifier (required)
        :param ProjectCollaboratorInvite collaborator: viewer or collaborator role. User user_id or email of user (required)
        :return: ResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'collaborator']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_project_collaborators_invite" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params) or (params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `private_project_collaborators_invite`")
        # verify the required parameter 'collaborator' is set
        if ('collaborator' not in params) or (params['collaborator'] is None):
            raise ValueError("Missing the required parameter `collaborator` when calling `private_project_collaborators_invite`")

        if 'project_id' in params and params['project_id'] < 1:
            raise ValueError("Invalid value for parameter `project_id` when calling `private_project_collaborators_invite`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'collaborator' in params:
            body_params = params['collaborator']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/projects/{project_id}/collaborators', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ResponseMessage',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_project_collaborators_list(self, project_id, **kwargs):
        """
        List project collaborators
        List Project collaborators and invited users
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_project_collaborators_list(project_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: Project unique identifier (required)
        :return: list[ProjectCollaborator]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_project_collaborators_list_with_http_info(project_id, **kwargs)
        else:
            (data) = self.private_project_collaborators_list_with_http_info(project_id, **kwargs)
            return data

    def private_project_collaborators_list_with_http_info(self, project_id, **kwargs):
        """
        List project collaborators
        List Project collaborators and invited users
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_project_collaborators_list_with_http_info(project_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: Project unique identifier (required)
        :return: list[ProjectCollaborator]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_project_collaborators_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params) or (params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `private_project_collaborators_list`")

        if 'project_id' in params and params['project_id'] < 1:
            raise ValueError("Invalid value for parameter `project_id` when calling `private_project_collaborators_list`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/projects/{project_id}/collaborators', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[ProjectCollaborator]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_project_create(self, project, **kwargs):
        """
        Create project
        Create a new project
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_project_create(project, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ProjectCreate project: Project  description (required)
        :return: CreateProjectResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_project_create_with_http_info(project, **kwargs)
        else:
            (data) = self.private_project_create_with_http_info(project, **kwargs)
            return data

    def private_project_create_with_http_info(self, project, **kwargs):
        """
        Create project
        Create a new project
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_project_create_with_http_info(project, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ProjectCreate project: Project  description (required)
        :return: CreateProjectResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_project_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project' is set
        if ('project' not in params) or (params['project'] is None):
            raise ValueError("Missing the required parameter `project` when calling `private_project_create`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'project' in params:
            body_params = params['project']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/projects', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CreateProjectResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_project_delete(self, project_id, **kwargs):
        """
        Delete project
        A project can be deleted only if: - it is not public - it does not have public articles.  When an individual project is deleted, all the articles are moved to my data of each owner.  When a group project is deleted, all the articles and files are deleted as well. Only project owner, group admin and above can delete a project. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_project_delete(project_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: Project unique identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_project_delete_with_http_info(project_id, **kwargs)
        else:
            (data) = self.private_project_delete_with_http_info(project_id, **kwargs)
            return data

    def private_project_delete_with_http_info(self, project_id, **kwargs):
        """
        Delete project
        A project can be deleted only if: - it is not public - it does not have public articles.  When an individual project is deleted, all the articles are moved to my data of each owner.  When a group project is deleted, all the articles and files are deleted as well. Only project owner, group admin and above can delete a project. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_project_delete_with_http_info(project_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: Project unique identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_project_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params) or (params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `private_project_delete`")

        if 'project_id' in params and params['project_id'] < 1:
            raise ValueError("Invalid value for parameter `project_id` when calling `private_project_delete`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/projects/{project_id}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_project_details(self, project_id, **kwargs):
        """
        View project details
        View a private project
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_project_details(project_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: Project unique identifier (required)
        :return: ProjectCompletePrivate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_project_details_with_http_info(project_id, **kwargs)
        else:
            (data) = self.private_project_details_with_http_info(project_id, **kwargs)
            return data

    def private_project_details_with_http_info(self, project_id, **kwargs):
        """
        View project details
        View a private project
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_project_details_with_http_info(project_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: Project unique identifier (required)
        :return: ProjectCompletePrivate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_project_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params) or (params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `private_project_details`")

        if 'project_id' in params and params['project_id'] < 1:
            raise ValueError("Invalid value for parameter `project_id` when calling `private_project_details`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/projects/{project_id}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ProjectCompletePrivate',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_project_leave(self, project_id, **kwargs):
        """
        Private Project Leave
        Please note: project's owner cannot leave the project.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_project_leave(project_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: Project unique identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_project_leave_with_http_info(project_id, **kwargs)
        else:
            (data) = self.private_project_leave_with_http_info(project_id, **kwargs)
            return data

    def private_project_leave_with_http_info(self, project_id, **kwargs):
        """
        Private Project Leave
        Please note: project's owner cannot leave the project.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_project_leave_with_http_info(project_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: Project unique identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_project_leave" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params) or (params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `private_project_leave`")

        if 'project_id' in params and params['project_id'] < 1:
            raise ValueError("Invalid value for parameter `project_id` when calling `private_project_leave`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/projects/{project_id}/leave', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_project_note(self, project_id, note_id, **kwargs):
        """
        Project note details
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_project_note(project_id, note_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: Project unique identifier (required)
        :param int note_id: Note unique identifier (required)
        :return: ProjectNotePrivate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_project_note_with_http_info(project_id, note_id, **kwargs)
        else:
            (data) = self.private_project_note_with_http_info(project_id, note_id, **kwargs)
            return data

    def private_project_note_with_http_info(self, project_id, note_id, **kwargs):
        """
        Project note details
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_project_note_with_http_info(project_id, note_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: Project unique identifier (required)
        :param int note_id: Note unique identifier (required)
        :return: ProjectNotePrivate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'note_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_project_note" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params) or (params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `private_project_note`")
        # verify the required parameter 'note_id' is set
        if ('note_id' not in params) or (params['note_id'] is None):
            raise ValueError("Missing the required parameter `note_id` when calling `private_project_note`")

        if 'project_id' in params and params['project_id'] < 1:
            raise ValueError("Invalid value for parameter `project_id` when calling `private_project_note`, must be a value greater than or equal to `1`")
        if 'note_id' in params and params['note_id'] < 1:
            raise ValueError("Invalid value for parameter `note_id` when calling `private_project_note`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']
        if 'note_id' in params:
            path_params['note_id'] = params['note_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/projects/{project_id}/notes/{note_id}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ProjectNotePrivate',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_project_note_delete(self, project_id, note_id, **kwargs):
        """
        Delete project note
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_project_note_delete(project_id, note_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: Project unique identifier (required)
        :param int note_id: Note unique identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_project_note_delete_with_http_info(project_id, note_id, **kwargs)
        else:
            (data) = self.private_project_note_delete_with_http_info(project_id, note_id, **kwargs)
            return data

    def private_project_note_delete_with_http_info(self, project_id, note_id, **kwargs):
        """
        Delete project note
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_project_note_delete_with_http_info(project_id, note_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: Project unique identifier (required)
        :param int note_id: Note unique identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'note_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_project_note_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params) or (params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `private_project_note_delete`")
        # verify the required parameter 'note_id' is set
        if ('note_id' not in params) or (params['note_id'] is None):
            raise ValueError("Missing the required parameter `note_id` when calling `private_project_note_delete`")

        if 'project_id' in params and params['project_id'] < 1:
            raise ValueError("Invalid value for parameter `project_id` when calling `private_project_note_delete`, must be a value greater than or equal to `1`")
        if 'note_id' in params and params['note_id'] < 1:
            raise ValueError("Invalid value for parameter `note_id` when calling `private_project_note_delete`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']
        if 'note_id' in params:
            path_params['note_id'] = params['note_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/projects/{project_id}/notes/{note_id}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_project_note_update(self, project_id, note_id, note, **kwargs):
        """
        Update project note
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_project_note_update(project_id, note_id, note, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: Project unique identifier (required)
        :param int note_id: Note unique identifier (required)
        :param ProjectNoteCreate note: Note message (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_project_note_update_with_http_info(project_id, note_id, note, **kwargs)
        else:
            (data) = self.private_project_note_update_with_http_info(project_id, note_id, note, **kwargs)
            return data

    def private_project_note_update_with_http_info(self, project_id, note_id, note, **kwargs):
        """
        Update project note
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_project_note_update_with_http_info(project_id, note_id, note, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: Project unique identifier (required)
        :param int note_id: Note unique identifier (required)
        :param ProjectNoteCreate note: Note message (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'note_id', 'note']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_project_note_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params) or (params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `private_project_note_update`")
        # verify the required parameter 'note_id' is set
        if ('note_id' not in params) or (params['note_id'] is None):
            raise ValueError("Missing the required parameter `note_id` when calling `private_project_note_update`")
        # verify the required parameter 'note' is set
        if ('note' not in params) or (params['note'] is None):
            raise ValueError("Missing the required parameter `note` when calling `private_project_note_update`")

        if 'project_id' in params and params['project_id'] < 1:
            raise ValueError("Invalid value for parameter `project_id` when calling `private_project_note_update`, must be a value greater than or equal to `1`")
        if 'note_id' in params and params['note_id'] < 1:
            raise ValueError("Invalid value for parameter `note_id` when calling `private_project_note_update`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']
        if 'note_id' in params:
            path_params['note_id'] = params['note_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'note' in params:
            body_params = params['note']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/projects/{project_id}/notes/{note_id}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_project_notes_create(self, project_id, note, **kwargs):
        """
        Create project note
        Create a new project note
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_project_notes_create(project_id, note, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: Project unique identifier (required)
        :param ProjectNoteCreate note: Note message (required)
        :return: Location
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_project_notes_create_with_http_info(project_id, note, **kwargs)
        else:
            (data) = self.private_project_notes_create_with_http_info(project_id, note, **kwargs)
            return data

    def private_project_notes_create_with_http_info(self, project_id, note, **kwargs):
        """
        Create project note
        Create a new project note
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_project_notes_create_with_http_info(project_id, note, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: Project unique identifier (required)
        :param ProjectNoteCreate note: Note message (required)
        :return: Location
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'note']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_project_notes_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params) or (params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `private_project_notes_create`")
        # verify the required parameter 'note' is set
        if ('note' not in params) or (params['note'] is None):
            raise ValueError("Missing the required parameter `note` when calling `private_project_notes_create`")

        if 'project_id' in params and params['project_id'] < 1:
            raise ValueError("Invalid value for parameter `project_id` when calling `private_project_notes_create`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'note' in params:
            body_params = params['note']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/projects/{project_id}/notes', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Location',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_project_notes_list(self, project_id, **kwargs):
        """
        List project notes
        List project notes
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_project_notes_list(project_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: Project unique identifier (required)
        :param int page: Page number. Used for pagination with page_size
        :param int page_size: The number of results included on a page. Used for pagination with page
        :param int limit: Number of results included on a page. Used for pagination with query
        :param int offset: Where to start the listing(the offset of the first result). Used for pagination with limit
        :return: list[ProjectNote]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_project_notes_list_with_http_info(project_id, **kwargs)
        else:
            (data) = self.private_project_notes_list_with_http_info(project_id, **kwargs)
            return data

    def private_project_notes_list_with_http_info(self, project_id, **kwargs):
        """
        List project notes
        List project notes
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_project_notes_list_with_http_info(project_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: Project unique identifier (required)
        :param int page: Page number. Used for pagination with page_size
        :param int page_size: The number of results included on a page. Used for pagination with page
        :param int limit: Number of results included on a page. Used for pagination with query
        :param int offset: Where to start the listing(the offset of the first result). Used for pagination with limit
        :return: list[ProjectNote]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'page', 'page_size', 'limit', 'offset']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_project_notes_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params) or (params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `private_project_notes_list`")

        if 'project_id' in params and params['project_id'] < 1:
            raise ValueError("Invalid value for parameter `project_id` when calling `private_project_notes_list`, must be a value greater than or equal to `1`")
        if 'page' in params and params['page'] > 5000:
            raise ValueError("Invalid value for parameter `page` when calling `private_project_notes_list`, must be a value less than or equal to `5000`")
        if 'page' in params and params['page'] < 1:
            raise ValueError("Invalid value for parameter `page` when calling `private_project_notes_list`, must be a value greater than or equal to `1`")
        if 'page_size' in params and params['page_size'] > 1000:
            raise ValueError("Invalid value for parameter `page_size` when calling `private_project_notes_list`, must be a value less than or equal to `1000`")
        if 'page_size' in params and params['page_size'] < 1:
            raise ValueError("Invalid value for parameter `page_size` when calling `private_project_notes_list`, must be a value greater than or equal to `1`")
        if 'limit' in params and params['limit'] > 1000:
            raise ValueError("Invalid value for parameter `limit` when calling `private_project_notes_list`, must be a value less than or equal to `1000`")
        if 'limit' in params and params['limit'] < 1:
            raise ValueError("Invalid value for parameter `limit` when calling `private_project_notes_list`, must be a value greater than or equal to `1`")
        if 'offset' in params and params['offset'] > 5000:
            raise ValueError("Invalid value for parameter `offset` when calling `private_project_notes_list`, must be a value less than or equal to `5000`")
        if 'offset' in params and params['offset'] < 0:
            raise ValueError("Invalid value for parameter `offset` when calling `private_project_notes_list`, must be a value greater than or equal to `0`")

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))
        if 'limit' in params:
            query_params.append(('limit', params['limit']))
        if 'offset' in params:
            query_params.append(('offset', params['offset']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/projects/{project_id}/notes', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[ProjectNote]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_project_publish(self, project_id, **kwargs):
        """
        Private Project Publish
        Publish a project. Possible after all items inside it are public
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_project_publish(project_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: Project unique identifier (required)
        :return: ResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_project_publish_with_http_info(project_id, **kwargs)
        else:
            (data) = self.private_project_publish_with_http_info(project_id, **kwargs)
            return data

    def private_project_publish_with_http_info(self, project_id, **kwargs):
        """
        Private Project Publish
        Publish a project. Possible after all items inside it are public
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_project_publish_with_http_info(project_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: Project unique identifier (required)
        :return: ResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_project_publish" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params) or (params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `private_project_publish`")

        if 'project_id' in params and params['project_id'] < 1:
            raise ValueError("Invalid value for parameter `project_id` when calling `private_project_publish`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/projects/{project_id}/publish', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ResponseMessage',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_project_update(self, project_id, project, **kwargs):
        """
        Update project
        Updating an project by passing body parameters; request can also be made with the PATCH method.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_project_update(project_id, project, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: Project unique identifier (required)
        :param ProjectUpdate project: Project description (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_project_update_with_http_info(project_id, project, **kwargs)
        else:
            (data) = self.private_project_update_with_http_info(project_id, project, **kwargs)
            return data

    def private_project_update_with_http_info(self, project_id, project, **kwargs):
        """
        Update project
        Updating an project by passing body parameters; request can also be made with the PATCH method.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_project_update_with_http_info(project_id, project, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: Project unique identifier (required)
        :param ProjectUpdate project: Project description (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'project']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_project_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params) or (params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `private_project_update`")
        # verify the required parameter 'project' is set
        if ('project' not in params) or (params['project'] is None):
            raise ValueError("Missing the required parameter `project` when calling `private_project_update`")

        if 'project_id' in params and params['project_id'] < 1:
            raise ValueError("Invalid value for parameter `project_id` when calling `private_project_update`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'project' in params:
            body_params = params['project']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/projects/{project_id}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_projects_list(self, **kwargs):
        """
        Private Projects
        List private projects
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_projects_list(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page: Page number. Used for pagination with page_size
        :param int page_size: The number of results included on a page. Used for pagination with page
        :param int limit: Number of results included on a page. Used for pagination with query
        :param int offset: Where to start the listing(the offset of the first result). Used for pagination with limit
        :param str order: The field by which to order.
        :param str order_direction:
        :param str storage: only return collections from this institution
        :param str roles: Any combination of owner, collaborator, viewer separated by comma. Examples: \"owner\" or \"owner,collaborator\".
        :return: list[ProjectPrivate]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_projects_list_with_http_info(**kwargs)
        else:
            (data) = self.private_projects_list_with_http_info(**kwargs)
            return data

    def private_projects_list_with_http_info(self, **kwargs):
        """
        Private Projects
        List private projects
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_projects_list_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page: Page number. Used for pagination with page_size
        :param int page_size: The number of results included on a page. Used for pagination with page
        :param int limit: Number of results included on a page. Used for pagination with query
        :param int offset: Where to start the listing(the offset of the first result). Used for pagination with limit
        :param str order: The field by which to order.
        :param str order_direction:
        :param str storage: only return collections from this institution
        :param str roles: Any combination of owner, collaborator, viewer separated by comma. Examples: \"owner\" or \"owner,collaborator\".
        :return: list[ProjectPrivate]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'page_size', 'limit', 'offset', 'order', 'order_direction', 'storage', 'roles']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_projects_list" % key
                )
            params[key] = val
        del params['kwargs']

        if 'page' in params and params['page'] > 5000:
            raise ValueError("Invalid value for parameter `page` when calling `private_projects_list`, must be a value less than or equal to `5000`")
        if 'page' in params and params['page'] < 1:
            raise ValueError("Invalid value for parameter `page` when calling `private_projects_list`, must be a value greater than or equal to `1`")
        if 'page_size' in params and params['page_size'] > 1000:
            raise ValueError("Invalid value for parameter `page_size` when calling `private_projects_list`, must be a value less than or equal to `1000`")
        if 'page_size' in params and params['page_size'] < 1:
            raise ValueError("Invalid value for parameter `page_size` when calling `private_projects_list`, must be a value greater than or equal to `1`")
        if 'limit' in params and params['limit'] > 1000:
            raise ValueError("Invalid value for parameter `limit` when calling `private_projects_list`, must be a value less than or equal to `1000`")
        if 'limit' in params and params['limit'] < 1:
            raise ValueError("Invalid value for parameter `limit` when calling `private_projects_list`, must be a value greater than or equal to `1`")
        if 'offset' in params and params['offset'] > 5000:
            raise ValueError("Invalid value for parameter `offset` when calling `private_projects_list`, must be a value less than or equal to `5000`")
        if 'offset' in params and params['offset'] < 0:
            raise ValueError("Invalid value for parameter `offset` when calling `private_projects_list`, must be a value greater than or equal to `0`")

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))
        if 'limit' in params:
            query_params.append(('limit', params['limit']))
        if 'offset' in params:
            query_params.append(('offset', params['offset']))
        if 'order' in params:
            query_params.append(('order', params['order']))
        if 'order_direction' in params:
            query_params.append(('order_direction', params['order_direction']))
        if 'storage' in params:
            query_params.append(('storage', params['storage']))
        if 'roles' in params:
            query_params.append(('roles', params['roles']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/projects', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[ProjectPrivate]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_projects_search(self, **kwargs):
        """
        Private Projects search
        Search inside the private projects
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_projects_search(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ProjectsSearch search: Search Parameters
        :return: list[ProjectPrivate]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_projects_search_with_http_info(**kwargs)
        else:
            (data) = self.private_projects_search_with_http_info(**kwargs)
            return data

    def private_projects_search_with_http_info(self, **kwargs):
        """
        Private Projects search
        Search inside the private projects
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_projects_search_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ProjectsSearch search: Search Parameters
        :return: list[ProjectPrivate]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['search']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_projects_search" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'search' in params:
            body_params = params['search']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/account/projects/search', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[ProjectPrivate]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def project_articles(self, project_id, **kwargs):
        """
        Public Project Articles
        List articles in project
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.project_articles(project_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: Project Unique identifier (required)
        :return: list[Article]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.project_articles_with_http_info(project_id, **kwargs)
        else:
            (data) = self.project_articles_with_http_info(project_id, **kwargs)
            return data

    def project_articles_with_http_info(self, project_id, **kwargs):
        """
        Public Project Articles
        List articles in project
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.project_articles_with_http_info(project_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: Project Unique identifier (required)
        :return: list[Article]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_articles" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params) or (params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `project_articles`")

        if 'project_id' in params and params['project_id'] < 1:
            raise ValueError("Invalid value for parameter `project_id` when calling `project_articles`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/projects/{project_id}/articles', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[Article]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def project_details(self, project_id, **kwargs):
        """
        Public Project
        View a project
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.project_details(project_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: Project Unique identifier (required)
        :return: ProjectComplete
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.project_details_with_http_info(project_id, **kwargs)
        else:
            (data) = self.project_details_with_http_info(project_id, **kwargs)
            return data

    def project_details_with_http_info(self, project_id, **kwargs):
        """
        Public Project
        View a project
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.project_details_with_http_info(project_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int project_id: Project Unique identifier (required)
        :return: ProjectComplete
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params) or (params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `project_details`")

        if 'project_id' in params and params['project_id'] < 1:
            raise ValueError("Invalid value for parameter `project_id` when calling `project_details`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/projects/{project_id}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ProjectComplete',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def projects_list(self, **kwargs):
        """
        Public Projects
        Returns a list of public projects
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.projects_list(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_cursor: Unique hash used for bypassing the item retrieval limit of 9,000 entities. When using this parameter, please note that the offset parameter will not be available, but the limit parameter will still work as expected.
        :param int page: Page number. Used for pagination with page_size
        :param int page_size: The number of results included on a page. Used for pagination with page
        :param int limit: Number of results included on a page. Used for pagination with query
        :param int offset: Where to start the listing(the offset of the first result). Used for pagination with limit
        :param str order: The field by which to order. Default varies by endpoint/resource.
        :param str order_direction:
        :param int institution: only return collections from this institution
        :param str published_since: Filter by article publishing date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD
        :param int group: only return collections from this group
        :return: list[Project]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.projects_list_with_http_info(**kwargs)
        else:
            (data) = self.projects_list_with_http_info(**kwargs)
            return data

    def projects_list_with_http_info(self, **kwargs):
        """
        Public Projects
        Returns a list of public projects
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.projects_list_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_cursor: Unique hash used for bypassing the item retrieval limit of 9,000 entities. When using this parameter, please note that the offset parameter will not be available, but the limit parameter will still work as expected.
        :param int page: Page number. Used for pagination with page_size
        :param int page_size: The number of results included on a page. Used for pagination with page
        :param int limit: Number of results included on a page. Used for pagination with query
        :param int offset: Where to start the listing(the offset of the first result). Used for pagination with limit
        :param str order: The field by which to order. Default varies by endpoint/resource.
        :param str order_direction:
        :param int institution: only return collections from this institution
        :param str published_since: Filter by article publishing date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD
        :param int group: only return collections from this group
        :return: list[Project]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_cursor', 'page', 'page_size', 'limit', 'offset', 'order', 'order_direction', 'institution', 'published_since', 'group']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method projects_list" % key
                )
            params[key] = val
        del params['kwargs']

        if 'page' in params and params['page'] > 5000:
            raise ValueError("Invalid value for parameter `page` when calling `projects_list`, must be a value less than or equal to `5000`")
        if 'page' in params and params['page'] < 1:
            raise ValueError("Invalid value for parameter `page` when calling `projects_list`, must be a value greater than or equal to `1`")
        if 'page_size' in params and params['page_size'] > 1000:
            raise ValueError("Invalid value for parameter `page_size` when calling `projects_list`, must be a value less than or equal to `1000`")
        if 'page_size' in params and params['page_size'] < 1:
            raise ValueError("Invalid value for parameter `page_size` when calling `projects_list`, must be a value greater than or equal to `1`")
        if 'limit' in params and params['limit'] > 1000:
            raise ValueError("Invalid value for parameter `limit` when calling `projects_list`, must be a value less than or equal to `1000`")
        if 'limit' in params and params['limit'] < 1:
            raise ValueError("Invalid value for parameter `limit` when calling `projects_list`, must be a value greater than or equal to `1`")
        if 'offset' in params and params['offset'] > 5000:
            raise ValueError("Invalid value for parameter `offset` when calling `projects_list`, must be a value less than or equal to `5000`")
        if 'offset' in params and params['offset'] < 0:
            raise ValueError("Invalid value for parameter `offset` when calling `projects_list`, must be a value greater than or equal to `0`")

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))
        if 'limit' in params:
            query_params.append(('limit', params['limit']))
        if 'offset' in params:
            query_params.append(('offset', params['offset']))
        if 'order' in params:
            query_params.append(('order', params['order']))
        if 'order_direction' in params:
            query_params.append(('order_direction', params['order_direction']))
        if 'institution' in params:
            query_params.append(('institution', params['institution']))
        if 'published_since' in params:
            query_params.append(('published_since', params['published_since']))
        if 'group' in params:
            query_params.append(('group', params['group']))

        header_params = {}
        if 'x_cursor' in params:
            header_params['X-Cursor'] = params['x_cursor']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/projects', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[Project]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def projects_search(self, **kwargs):
        """
        Public Projects Search
        Returns a list of public articles
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.projects_search(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_cursor: Unique hash used for bypassing the item retrieval limit of 9,000 entities. When using this parameter, please note that the offset parameter will not be available, but the limit parameter will still work as expected.
        :param ProjectsSearch search: Search Parameters
        :return: list[Project]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.projects_search_with_http_info(**kwargs)
        else:
            (data) = self.projects_search_with_http_info(**kwargs)
            return data

    def projects_search_with_http_info(self, **kwargs):
        """
        Public Projects Search
        Returns a list of public articles
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.projects_search_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_cursor: Unique hash used for bypassing the item retrieval limit of 9,000 entities. When using this parameter, please note that the offset parameter will not be available, but the limit parameter will still work as expected.
        :param ProjectsSearch search: Search Parameters
        :return: list[Project]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_cursor', 'search']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method projects_search" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_cursor' in params:
            header_params['X-Cursor'] = params['x_cursor']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'search' in params:
            body_params = params['search']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/projects/search', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[Project]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
