# coding: utf-8

"""
    Figshare API

    Figshare apiv2. Using Swagger 2.0

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class InstitutionsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def account_institution_curation(self, curation_id, **kwargs):
        """
        Institution Curation Review
        Retrieve a certain curation review by its ID
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.account_institution_curation(curation_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int curation_id: ID of the curation (required)
        :return: CurationDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.account_institution_curation_with_http_info(curation_id, **kwargs)
        else:
            (data) = self.account_institution_curation_with_http_info(curation_id, **kwargs)
            return data

    def account_institution_curation_with_http_info(self, curation_id, **kwargs):
        """
        Institution Curation Review
        Retrieve a certain curation review by its ID
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.account_institution_curation_with_http_info(curation_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int curation_id: ID of the curation (required)
        :return: CurationDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['curation_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_institution_curation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'curation_id' is set
        if ('curation_id' not in params) or (params['curation_id'] is None):
            raise ValueError("Missing the required parameter `curation_id` when calling `account_institution_curation`")

        if 'curation_id' in params and params['curation_id'] < 1:
            raise ValueError("Invalid value for parameter `curation_id` when calling `account_institution_curation`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'curation_id' in params:
            path_params['curation_id'] = params['curation_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/institution/review/{curation_id}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CurationDetail',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def account_institution_curation_comments(self, curation_id, **kwargs):
        """
        Institution Curation Review Comments
        Retrieve a certain curation review's comments.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.account_institution_curation_comments(curation_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int curation_id: ID of the curation (required)
        :param int limit: Number of results included on a page. Used for pagination with query
        :param int offset: Where to start the listing(the offset of the first result). Used for pagination with limit
        :return: CurationComment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.account_institution_curation_comments_with_http_info(curation_id, **kwargs)
        else:
            (data) = self.account_institution_curation_comments_with_http_info(curation_id, **kwargs)
            return data

    def account_institution_curation_comments_with_http_info(self, curation_id, **kwargs):
        """
        Institution Curation Review Comments
        Retrieve a certain curation review's comments.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.account_institution_curation_comments_with_http_info(curation_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int curation_id: ID of the curation (required)
        :param int limit: Number of results included on a page. Used for pagination with query
        :param int offset: Where to start the listing(the offset of the first result). Used for pagination with limit
        :return: CurationComment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['curation_id', 'limit', 'offset']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_institution_curation_comments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'curation_id' is set
        if ('curation_id' not in params) or (params['curation_id'] is None):
            raise ValueError("Missing the required parameter `curation_id` when calling `account_institution_curation_comments`")

        if 'curation_id' in params and params['curation_id'] < 1:
            raise ValueError("Invalid value for parameter `curation_id` when calling `account_institution_curation_comments`, must be a value greater than or equal to `1`")
        if 'limit' in params and params['limit'] > 1000:
            raise ValueError("Invalid value for parameter `limit` when calling `account_institution_curation_comments`, must be a value less than or equal to `1000`")
        if 'limit' in params and params['limit'] < 1:
            raise ValueError("Invalid value for parameter `limit` when calling `account_institution_curation_comments`, must be a value greater than or equal to `1`")
        if 'offset' in params and params['offset'] > 5000:
            raise ValueError("Invalid value for parameter `offset` when calling `account_institution_curation_comments`, must be a value less than or equal to `5000`")
        if 'offset' in params and params['offset'] < 0:
            raise ValueError("Invalid value for parameter `offset` when calling `account_institution_curation_comments`, must be a value greater than or equal to `0`")

        collection_formats = {}

        path_params = {}
        if 'curation_id' in params:
            path_params['curation_id'] = params['curation_id']

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))
        if 'offset' in params:
            query_params.append(('offset', params['offset']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/institution/review/{curation_id}/comments', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CurationComment',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def account_institution_curation_comments_0(self, curation_id, curation_comment, **kwargs):
        """
        POST Institution Curation Review Comment
        Add a new comment to the review.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.account_institution_curation_comments_0(curation_id, curation_comment, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int curation_id: ID of the curation (required)
        :param CurationCommentCreate curation_comment: The content/value of the comment. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.account_institution_curation_comments_0_with_http_info(curation_id, curation_comment, **kwargs)
        else:
            (data) = self.account_institution_curation_comments_0_with_http_info(curation_id, curation_comment, **kwargs)
            return data

    def account_institution_curation_comments_0_with_http_info(self, curation_id, curation_comment, **kwargs):
        """
        POST Institution Curation Review Comment
        Add a new comment to the review.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.account_institution_curation_comments_0_with_http_info(curation_id, curation_comment, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int curation_id: ID of the curation (required)
        :param CurationCommentCreate curation_comment: The content/value of the comment. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['curation_id', 'curation_comment']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_institution_curation_comments_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'curation_id' is set
        if ('curation_id' not in params) or (params['curation_id'] is None):
            raise ValueError("Missing the required parameter `curation_id` when calling `account_institution_curation_comments_0`")
        # verify the required parameter 'curation_comment' is set
        if ('curation_comment' not in params) or (params['curation_comment'] is None):
            raise ValueError("Missing the required parameter `curation_comment` when calling `account_institution_curation_comments_0`")

        if 'curation_id' in params and params['curation_id'] < 1:
            raise ValueError("Invalid value for parameter `curation_id` when calling `account_institution_curation_comments_0`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'curation_id' in params:
            path_params['curation_id'] = params['curation_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'curation_comment' in params:
            body_params = params['curation_comment']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/institution/review/{curation_id}/comments', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def account_institution_curations(self, **kwargs):
        """
        Institution Curation Reviews
        Retrieve a list of curation reviews for this institution
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.account_institution_curations(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int group_id: Filter by the group ID
        :param int article_id: Retrieve the reviews for this article
        :param str status: Filter by the status of the review
        :param int limit: Number of results included on a page. Used for pagination with query
        :param int offset: Where to start the listing(the offset of the first result). Used for pagination with limit
        :return: Curation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.account_institution_curations_with_http_info(**kwargs)
        else:
            (data) = self.account_institution_curations_with_http_info(**kwargs)
            return data

    def account_institution_curations_with_http_info(self, **kwargs):
        """
        Institution Curation Reviews
        Retrieve a list of curation reviews for this institution
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.account_institution_curations_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int group_id: Filter by the group ID
        :param int article_id: Retrieve the reviews for this article
        :param str status: Filter by the status of the review
        :param int limit: Number of results included on a page. Used for pagination with query
        :param int offset: Where to start the listing(the offset of the first result). Used for pagination with limit
        :return: Curation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'article_id', 'status', 'limit', 'offset']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_institution_curations" % key
                )
            params[key] = val
        del params['kwargs']

        if 'group_id' in params and params['group_id'] < 0:
            raise ValueError("Invalid value for parameter `group_id` when calling `account_institution_curations`, must be a value greater than or equal to `0`")
        if 'article_id' in params and params['article_id'] < 0:
            raise ValueError("Invalid value for parameter `article_id` when calling `account_institution_curations`, must be a value greater than or equal to `0`")
        if 'limit' in params and params['limit'] > 1000:
            raise ValueError("Invalid value for parameter `limit` when calling `account_institution_curations`, must be a value less than or equal to `1000`")
        if 'limit' in params and params['limit'] < 1:
            raise ValueError("Invalid value for parameter `limit` when calling `account_institution_curations`, must be a value greater than or equal to `1`")
        if 'offset' in params and params['offset'] > 5000:
            raise ValueError("Invalid value for parameter `offset` when calling `account_institution_curations`, must be a value less than or equal to `5000`")
        if 'offset' in params and params['offset'] < 0:
            raise ValueError("Invalid value for parameter `offset` when calling `account_institution_curations`, must be a value greater than or equal to `0`")

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'group_id' in params:
            query_params.append(('group_id', params['group_id']))
        if 'article_id' in params:
            query_params.append(('article_id', params['article_id']))
        if 'status' in params:
            query_params.append(('status', params['status']))
        if 'limit' in params:
            query_params.append(('limit', params['limit']))
        if 'offset' in params:
            query_params.append(('offset', params['offset']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/institution/reviews', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Curation',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def custom_fields_list(self, **kwargs):
        """
        Private account institution group custom fields
        Returns the custom fields in the group the user belongs to, or the ones in the group specified, if the user has access.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.custom_fields_list(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int group_id: Group_id
        :return: list[ShortCustomField]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.custom_fields_list_with_http_info(**kwargs)
        else:
            (data) = self.custom_fields_list_with_http_info(**kwargs)
            return data

    def custom_fields_list_with_http_info(self, **kwargs):
        """
        Private account institution group custom fields
        Returns the custom fields in the group the user belongs to, or the ones in the group specified, if the user has access.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.custom_fields_list_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int group_id: Group_id
        :return: list[ShortCustomField]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method custom_fields_list" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'group_id' in params:
            query_params.append(('group_id', params['group_id']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/institution/custom_fields', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[ShortCustomField]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def custom_fields_upload(self, custom_field_id, **kwargs):
        """
        Custom fields values files upload
        Uploads a CSV containing values for a specific custom field of type <b>dropdown_large_list</b>. More details in the <a href=\"#custom_fields\">Custom Fields section</a>
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.custom_fields_upload(custom_field_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int custom_field_id: Custom field identifier (required)
        :param file external_file: CSV file to be uploaded
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.custom_fields_upload_with_http_info(custom_field_id, **kwargs)
        else:
            (data) = self.custom_fields_upload_with_http_info(custom_field_id, **kwargs)
            return data

    def custom_fields_upload_with_http_info(self, custom_field_id, **kwargs):
        """
        Custom fields values files upload
        Uploads a CSV containing values for a specific custom field of type <b>dropdown_large_list</b>. More details in the <a href=\"#custom_fields\">Custom Fields section</a>
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.custom_fields_upload_with_http_info(custom_field_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int custom_field_id: Custom field identifier (required)
        :param file external_file: CSV file to be uploaded
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['custom_field_id', 'external_file']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method custom_fields_upload" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'custom_field_id' is set
        if ('custom_field_id' not in params) or (params['custom_field_id'] is None):
            raise ValueError("Missing the required parameter `custom_field_id` when calling `custom_fields_upload`")

        if 'custom_field_id' in params and params['custom_field_id'] < 1:
            raise ValueError("Invalid value for parameter `custom_field_id` when calling `custom_fields_upload`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'custom_field_id' in params:
            path_params['custom_field_id'] = params['custom_field_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'external_file' in params:
            local_var_files['external_file'] = params['external_file']

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['multipart/form-data'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/institution/custom_fields/{custom_field_id}/items/upload', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='object',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def institution_articles(self, institution_string_id, resource_id, filename, **kwargs):
        """
        Public Licenses
        Returns a list of articles belonging to the institution
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.institution_articles(institution_string_id, resource_id, filename, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str institution_string_id: (required)
        :param str resource_id: (required)
        :param str filename: (required)
        :return: list[Article]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.institution_articles_with_http_info(institution_string_id, resource_id, filename, **kwargs)
        else:
            (data) = self.institution_articles_with_http_info(institution_string_id, resource_id, filename, **kwargs)
            return data

    def institution_articles_with_http_info(self, institution_string_id, resource_id, filename, **kwargs):
        """
        Public Licenses
        Returns a list of articles belonging to the institution
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.institution_articles_with_http_info(institution_string_id, resource_id, filename, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str institution_string_id: (required)
        :param str resource_id: (required)
        :param str filename: (required)
        :return: list[Article]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['institution_string_id', 'resource_id', 'filename']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method institution_articles" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'institution_string_id' is set
        if ('institution_string_id' not in params) or (params['institution_string_id'] is None):
            raise ValueError("Missing the required parameter `institution_string_id` when calling `institution_articles`")
        # verify the required parameter 'resource_id' is set
        if ('resource_id' not in params) or (params['resource_id'] is None):
            raise ValueError("Missing the required parameter `resource_id` when calling `institution_articles`")
        # verify the required parameter 'filename' is set
        if ('filename' not in params) or (params['filename'] is None):
            raise ValueError("Missing the required parameter `filename` when calling `institution_articles`")


        collection_formats = {}

        path_params = {}
        if 'institution_string_id' in params:
            path_params['institution_string_id'] = params['institution_string_id']

        query_params = []
        if 'resource_id' in params:
            query_params.append(('resource_id', params['resource_id']))
        if 'filename' in params:
            query_params.append(('filename', params['filename']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/institutions/{institution_string_id}/articles/filter-by', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[Article]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def institution_hrfeed_upload(self, **kwargs):
        """
        Private Institution HRfeed Upload
        More info in the <a href=\"#hr_feed\">HR Feed section</a>
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.institution_hrfeed_upload(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param file hrfeed: You can find an example in the Hr Feed section
        :return: ResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.institution_hrfeed_upload_with_http_info(**kwargs)
        else:
            (data) = self.institution_hrfeed_upload_with_http_info(**kwargs)
            return data

    def institution_hrfeed_upload_with_http_info(self, **kwargs):
        """
        Private Institution HRfeed Upload
        More info in the <a href=\"#hr_feed\">HR Feed section</a>
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.institution_hrfeed_upload_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param file hrfeed: You can find an example in the Hr Feed section
        :return: ResponseMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hrfeed']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method institution_hrfeed_upload" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'hrfeed' in params:
            local_var_files['hrfeed'] = params['hrfeed']

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['multipart/form-data'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/institution/hrfeed/upload', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ResponseMessage',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_account_institution_user(self, account_id, **kwargs):
        """
        Private Account Institution User
        Retrieve institution user information using the account_id
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_account_institution_user(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int account_id: Account identifier the user is associated to (required)
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_account_institution_user_with_http_info(account_id, **kwargs)
        else:
            (data) = self.private_account_institution_user_with_http_info(account_id, **kwargs)
            return data

    def private_account_institution_user_with_http_info(self, account_id, **kwargs):
        """
        Private Account Institution User
        Retrieve institution user information using the account_id
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_account_institution_user_with_http_info(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int account_id: Account identifier the user is associated to (required)
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_account_institution_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `private_account_institution_user`")

        if 'account_id' in params and params['account_id'] < 1:
            raise ValueError("Invalid value for parameter `account_id` when calling `private_account_institution_user`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/institution/users/{account_id}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='User',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_categories_list(self, **kwargs):
        """
        Private Account Categories
        List institution categories (including parent Categories)
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_categories_list(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: list[Category]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_categories_list_with_http_info(**kwargs)
        else:
            (data) = self.private_categories_list_with_http_info(**kwargs)
            return data

    def private_categories_list_with_http_info(self, **kwargs):
        """
        Private Account Categories
        List institution categories (including parent Categories)
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_categories_list_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: list[Category]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_categories_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/categories', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[Category]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_group_embargo_options_details(self, group_id, **kwargs):
        """
        Private Account Institution Group Embargo Options
        Account institution group embargo options details
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_group_embargo_options_details(group_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int group_id: Group identifier (required)
        :return: list[GroupEmbargoOptions]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_group_embargo_options_details_with_http_info(group_id, **kwargs)
        else:
            (data) = self.private_group_embargo_options_details_with_http_info(group_id, **kwargs)
            return data

    def private_group_embargo_options_details_with_http_info(self, group_id, **kwargs):
        """
        Private Account Institution Group Embargo Options
        Account institution group embargo options details
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_group_embargo_options_details_with_http_info(group_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int group_id: Group identifier (required)
        :return: list[GroupEmbargoOptions]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_group_embargo_options_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params) or (params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `private_group_embargo_options_details`")

        if 'group_id' in params and params['group_id'] < 1:
            raise ValueError("Invalid value for parameter `group_id` when calling `private_group_embargo_options_details`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['group_id'] = params['group_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/institution/groups/{group_id}/embargo_options', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[GroupEmbargoOptions]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_institution_account_group_role_delete(self, account_id, group_id, role_id, **kwargs):
        """
        Delete Institution Account Group Role
        Delete Institution Account Group Role
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_institution_account_group_role_delete(account_id, group_id, role_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int account_id: Account identifier for which to remove the role (required)
        :param int group_id: Group identifier for which to remove the role (required)
        :param int role_id: Role identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_institution_account_group_role_delete_with_http_info(account_id, group_id, role_id, **kwargs)
        else:
            (data) = self.private_institution_account_group_role_delete_with_http_info(account_id, group_id, role_id, **kwargs)
            return data

    def private_institution_account_group_role_delete_with_http_info(self, account_id, group_id, role_id, **kwargs):
        """
        Delete Institution Account Group Role
        Delete Institution Account Group Role
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_institution_account_group_role_delete_with_http_info(account_id, group_id, role_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int account_id: Account identifier for which to remove the role (required)
        :param int group_id: Group identifier for which to remove the role (required)
        :param int role_id: Role identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'group_id', 'role_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_institution_account_group_role_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `private_institution_account_group_role_delete`")
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params) or (params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `private_institution_account_group_role_delete`")
        # verify the required parameter 'role_id' is set
        if ('role_id' not in params) or (params['role_id'] is None):
            raise ValueError("Missing the required parameter `role_id` when calling `private_institution_account_group_role_delete`")

        if 'account_id' in params and params['account_id'] < 1:
            raise ValueError("Invalid value for parameter `account_id` when calling `private_institution_account_group_role_delete`, must be a value greater than or equal to `1`")
        if 'group_id' in params and params['group_id'] < 1:
            raise ValueError("Invalid value for parameter `group_id` when calling `private_institution_account_group_role_delete`, must be a value greater than or equal to `1`")
        if 'role_id' in params and params['role_id'] < 1:
            raise ValueError("Invalid value for parameter `role_id` when calling `private_institution_account_group_role_delete`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']
        if 'group_id' in params:
            path_params['group_id'] = params['group_id']
        if 'role_id' in params:
            path_params['role_id'] = params['role_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/institution/roles/{account_id}/{group_id}/{role_id}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_institution_account_group_roles(self, account_id, **kwargs):
        """
        List Institution Account Group Roles
        List Institution Account Group Roles
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_institution_account_group_roles(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int account_id: Account identifier the user is associated to (required)
        :return: AccountGroupRoles
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_institution_account_group_roles_with_http_info(account_id, **kwargs)
        else:
            (data) = self.private_institution_account_group_roles_with_http_info(account_id, **kwargs)
            return data

    def private_institution_account_group_roles_with_http_info(self, account_id, **kwargs):
        """
        List Institution Account Group Roles
        List Institution Account Group Roles
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_institution_account_group_roles_with_http_info(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int account_id: Account identifier the user is associated to (required)
        :return: AccountGroupRoles
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_institution_account_group_roles" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `private_institution_account_group_roles`")

        if 'account_id' in params and params['account_id'] < 1:
            raise ValueError("Invalid value for parameter `account_id` when calling `private_institution_account_group_roles`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/institution/roles/{account_id}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='AccountGroupRoles',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_institution_account_group_roles_create(self, account_id, account, **kwargs):
        """
        Add Institution Account Group Roles
        Add Institution Account Group Roles
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_institution_account_group_roles_create(account_id, account, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int account_id: Account identifier the user is associated to (required)
        :param AccountGroupRolesCreate account: Account description (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_institution_account_group_roles_create_with_http_info(account_id, account, **kwargs)
        else:
            (data) = self.private_institution_account_group_roles_create_with_http_info(account_id, account, **kwargs)
            return data

    def private_institution_account_group_roles_create_with_http_info(self, account_id, account, **kwargs):
        """
        Add Institution Account Group Roles
        Add Institution Account Group Roles
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_institution_account_group_roles_create_with_http_info(account_id, account, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int account_id: Account identifier the user is associated to (required)
        :param AccountGroupRolesCreate account: Account description (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'account']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_institution_account_group_roles_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `private_institution_account_group_roles_create`")
        # verify the required parameter 'account' is set
        if ('account' not in params) or (params['account'] is None):
            raise ValueError("Missing the required parameter `account` when calling `private_institution_account_group_roles_create`")

        if 'account_id' in params and params['account_id'] < 1:
            raise ValueError("Invalid value for parameter `account_id` when calling `private_institution_account_group_roles_create`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'account' in params:
            body_params = params['account']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/institution/roles/{account_id}', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_institution_accounts_create(self, account, **kwargs):
        """
        Create new Institution Account
        Create a new Account by sending account information
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_institution_accounts_create(account, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AccountCreate account: Account description (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_institution_accounts_create_with_http_info(account, **kwargs)
        else:
            (data) = self.private_institution_accounts_create_with_http_info(account, **kwargs)
            return data

    def private_institution_accounts_create_with_http_info(self, account, **kwargs):
        """
        Create new Institution Account
        Create a new Account by sending account information
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_institution_accounts_create_with_http_info(account, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AccountCreate account: Account description (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_institution_accounts_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account' is set
        if ('account' not in params) or (params['account'] is None):
            raise ValueError("Missing the required parameter `account` when calling `private_institution_accounts_create`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'account' in params:
            body_params = params['account']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/institution/accounts', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_institution_accounts_list(self, **kwargs):
        """
        Private Account Institution Accounts
        Returns the accounts for which the account has administrative privileges (assigned and inherited).
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_institution_accounts_list(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page: Page number. Used for pagination with page_size
        :param int page_size: The number of results included on a page. Used for pagination with page
        :param int limit: Number of results included on a page. Used for pagination with query
        :param int offset: Where to start the listing(the offset of the first result). Used for pagination with limit
        :param int is_active: Filter by active status
        :param str institution_user_id: Filter by institution_user_id
        :param str email: Filter by email
        :param int id_lte: Retrieve accounts with an ID lower or equal to the specified value
        :param int id_gte: Retrieve accounts with an ID greater or equal to the specified value
        :return: list[ShortAccount]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_institution_accounts_list_with_http_info(**kwargs)
        else:
            (data) = self.private_institution_accounts_list_with_http_info(**kwargs)
            return data

    def private_institution_accounts_list_with_http_info(self, **kwargs):
        """
        Private Account Institution Accounts
        Returns the accounts for which the account has administrative privileges (assigned and inherited).
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_institution_accounts_list_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page: Page number. Used for pagination with page_size
        :param int page_size: The number of results included on a page. Used for pagination with page
        :param int limit: Number of results included on a page. Used for pagination with query
        :param int offset: Where to start the listing(the offset of the first result). Used for pagination with limit
        :param int is_active: Filter by active status
        :param str institution_user_id: Filter by institution_user_id
        :param str email: Filter by email
        :param int id_lte: Retrieve accounts with an ID lower or equal to the specified value
        :param int id_gte: Retrieve accounts with an ID greater or equal to the specified value
        :return: list[ShortAccount]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'page_size', 'limit', 'offset', 'is_active', 'institution_user_id', 'email', 'id_lte', 'id_gte']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_institution_accounts_list" % key
                )
            params[key] = val
        del params['kwargs']

        if 'page' in params and params['page'] > 5000:
            raise ValueError("Invalid value for parameter `page` when calling `private_institution_accounts_list`, must be a value less than or equal to `5000`")
        if 'page' in params and params['page'] < 1:
            raise ValueError("Invalid value for parameter `page` when calling `private_institution_accounts_list`, must be a value greater than or equal to `1`")
        if 'page_size' in params and params['page_size'] > 1000:
            raise ValueError("Invalid value for parameter `page_size` when calling `private_institution_accounts_list`, must be a value less than or equal to `1000`")
        if 'page_size' in params and params['page_size'] < 1:
            raise ValueError("Invalid value for parameter `page_size` when calling `private_institution_accounts_list`, must be a value greater than or equal to `1`")
        if 'limit' in params and params['limit'] > 1000:
            raise ValueError("Invalid value for parameter `limit` when calling `private_institution_accounts_list`, must be a value less than or equal to `1000`")
        if 'limit' in params and params['limit'] < 1:
            raise ValueError("Invalid value for parameter `limit` when calling `private_institution_accounts_list`, must be a value greater than or equal to `1`")
        if 'offset' in params and params['offset'] > 5000:
            raise ValueError("Invalid value for parameter `offset` when calling `private_institution_accounts_list`, must be a value less than or equal to `5000`")
        if 'offset' in params and params['offset'] < 0:
            raise ValueError("Invalid value for parameter `offset` when calling `private_institution_accounts_list`, must be a value greater than or equal to `0`")
        if 'is_active' in params and params['is_active'] > 1:
            raise ValueError("Invalid value for parameter `is_active` when calling `private_institution_accounts_list`, must be a value less than or equal to `1`")
        if 'is_active' in params and params['is_active'] < 0:
            raise ValueError("Invalid value for parameter `is_active` when calling `private_institution_accounts_list`, must be a value greater than or equal to `0`")
        if 'id_lte' in params and params['id_lte'] < 0:
            raise ValueError("Invalid value for parameter `id_lte` when calling `private_institution_accounts_list`, must be a value greater than or equal to `0`")
        if 'id_gte' in params and params['id_gte'] < 0:
            raise ValueError("Invalid value for parameter `id_gte` when calling `private_institution_accounts_list`, must be a value greater than or equal to `0`")

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))
        if 'limit' in params:
            query_params.append(('limit', params['limit']))
        if 'offset' in params:
            query_params.append(('offset', params['offset']))
        if 'is_active' in params:
            query_params.append(('is_active', params['is_active']))
        if 'institution_user_id' in params:
            query_params.append(('institution_user_id', params['institution_user_id']))
        if 'email' in params:
            query_params.append(('email', params['email']))
        if 'id_lte' in params:
            query_params.append(('id_lte', params['id_lte']))
        if 'id_gte' in params:
            query_params.append(('id_gte', params['id_gte']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/institution/accounts', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[ShortAccount]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_institution_accounts_search(self, search, **kwargs):
        """
        Private Account Institution Accounts Search
        Returns the accounts for which the account has administrative privileges (assigned and inherited).
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_institution_accounts_search(search, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param InstitutionAccountsSearch search: Search Parameters (required)
        :return: list[ShortAccount]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_institution_accounts_search_with_http_info(search, **kwargs)
        else:
            (data) = self.private_institution_accounts_search_with_http_info(search, **kwargs)
            return data

    def private_institution_accounts_search_with_http_info(self, search, **kwargs):
        """
        Private Account Institution Accounts Search
        Returns the accounts for which the account has administrative privileges (assigned and inherited).
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_institution_accounts_search_with_http_info(search, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param InstitutionAccountsSearch search: Search Parameters (required)
        :return: list[ShortAccount]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['search']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_institution_accounts_search" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'search' is set
        if ('search' not in params) or (params['search'] is None):
            raise ValueError("Missing the required parameter `search` when calling `private_institution_accounts_search`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'search' in params:
            body_params = params['search']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/institution/accounts/search', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[ShortAccount]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_institution_accounts_update(self, account_id, account, **kwargs):
        """
        Update Institution Account
        Update Institution Account
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_institution_accounts_update(account_id, account, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int account_id: Account identifier the user is associated to (required)
        :param AccountUpdate account: Account description (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_institution_accounts_update_with_http_info(account_id, account, **kwargs)
        else:
            (data) = self.private_institution_accounts_update_with_http_info(account_id, account, **kwargs)
            return data

    def private_institution_accounts_update_with_http_info(self, account_id, account, **kwargs):
        """
        Update Institution Account
        Update Institution Account
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_institution_accounts_update_with_http_info(account_id, account, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int account_id: Account identifier the user is associated to (required)
        :param AccountUpdate account: Account description (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'account']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_institution_accounts_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `private_institution_accounts_update`")
        # verify the required parameter 'account' is set
        if ('account' not in params) or (params['account'] is None):
            raise ValueError("Missing the required parameter `account` when calling `private_institution_accounts_update`")

        if 'account_id' in params and params['account_id'] < 1:
            raise ValueError("Invalid value for parameter `account_id` when calling `private_institution_accounts_update`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'account' in params:
            body_params = params['account']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/institution/accounts/{account_id}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_institution_articles(self, **kwargs):
        """
        Private Institution Articles
        Get Articles from own institution. User must be administrator of the institution
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_institution_articles(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page: Page number. Used for pagination with page_size
        :param int page_size: The number of results included on a page. Used for pagination with page
        :param int limit: Number of results included on a page. Used for pagination with query
        :param int offset: Where to start the listing(the offset of the first result). Used for pagination with limit
        :param str order: The field by which to order. Default varies by endpoint/resource.
        :param str order_direction:
        :param str published_since: Filter by article publishing date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD
        :param str modified_since: Filter by article modified date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD
        :param int status: only return collections with this status
        :param str resource_doi: only return collections with this resource_doi
        :param int item_type: Only return articles with the respective type. Mapping for item_type is: 1 - Figure, 2 - Media, 3 - Dataset, 5 - Poster, 6 - Journal contribution, 7 - Presentation, 8 - Thesis, 9 - Software, 11 - Online resource, 12 - Preprint, 13 - Book, 14 - Conference contribution, 15 - Chapter, 16 - Peer review, 17 - Educational resource, 18 - Report, 19 - Standard, 20 - Composition, 21 - Funding, 22 - Physical object, 23 - Data management plan, 24 - Workflow, 25 - Monograph, 26 - Performance, 27 - Event, 28 - Service, 29 - Model
        :return: list[Article]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_institution_articles_with_http_info(**kwargs)
        else:
            (data) = self.private_institution_articles_with_http_info(**kwargs)
            return data

    def private_institution_articles_with_http_info(self, **kwargs):
        """
        Private Institution Articles
        Get Articles from own institution. User must be administrator of the institution
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_institution_articles_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page: Page number. Used for pagination with page_size
        :param int page_size: The number of results included on a page. Used for pagination with page
        :param int limit: Number of results included on a page. Used for pagination with query
        :param int offset: Where to start the listing(the offset of the first result). Used for pagination with limit
        :param str order: The field by which to order. Default varies by endpoint/resource.
        :param str order_direction:
        :param str published_since: Filter by article publishing date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD
        :param str modified_since: Filter by article modified date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD
        :param int status: only return collections with this status
        :param str resource_doi: only return collections with this resource_doi
        :param int item_type: Only return articles with the respective type. Mapping for item_type is: 1 - Figure, 2 - Media, 3 - Dataset, 5 - Poster, 6 - Journal contribution, 7 - Presentation, 8 - Thesis, 9 - Software, 11 - Online resource, 12 - Preprint, 13 - Book, 14 - Conference contribution, 15 - Chapter, 16 - Peer review, 17 - Educational resource, 18 - Report, 19 - Standard, 20 - Composition, 21 - Funding, 22 - Physical object, 23 - Data management plan, 24 - Workflow, 25 - Monograph, 26 - Performance, 27 - Event, 28 - Service, 29 - Model
        :return: list[Article]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'page_size', 'limit', 'offset', 'order', 'order_direction', 'published_since', 'modified_since', 'status', 'resource_doi', 'item_type']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_institution_articles" % key
                )
            params[key] = val
        del params['kwargs']

        if 'page' in params and params['page'] > 5000:
            raise ValueError("Invalid value for parameter `page` when calling `private_institution_articles`, must be a value less than or equal to `5000`")
        if 'page' in params and params['page'] < 1:
            raise ValueError("Invalid value for parameter `page` when calling `private_institution_articles`, must be a value greater than or equal to `1`")
        if 'page_size' in params and params['page_size'] > 1000:
            raise ValueError("Invalid value for parameter `page_size` when calling `private_institution_articles`, must be a value less than or equal to `1000`")
        if 'page_size' in params and params['page_size'] < 1:
            raise ValueError("Invalid value for parameter `page_size` when calling `private_institution_articles`, must be a value greater than or equal to `1`")
        if 'limit' in params and params['limit'] > 1000:
            raise ValueError("Invalid value for parameter `limit` when calling `private_institution_articles`, must be a value less than or equal to `1000`")
        if 'limit' in params and params['limit'] < 1:
            raise ValueError("Invalid value for parameter `limit` when calling `private_institution_articles`, must be a value greater than or equal to `1`")
        if 'offset' in params and params['offset'] > 5000:
            raise ValueError("Invalid value for parameter `offset` when calling `private_institution_articles`, must be a value less than or equal to `5000`")
        if 'offset' in params and params['offset'] < 0:
            raise ValueError("Invalid value for parameter `offset` when calling `private_institution_articles`, must be a value greater than or equal to `0`")

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))
        if 'limit' in params:
            query_params.append(('limit', params['limit']))
        if 'offset' in params:
            query_params.append(('offset', params['offset']))
        if 'order' in params:
            query_params.append(('order', params['order']))
        if 'order_direction' in params:
            query_params.append(('order_direction', params['order_direction']))
        if 'published_since' in params:
            query_params.append(('published_since', params['published_since']))
        if 'modified_since' in params:
            query_params.append(('modified_since', params['modified_since']))
        if 'status' in params:
            query_params.append(('status', params['status']))
        if 'resource_doi' in params:
            query_params.append(('resource_doi', params['resource_doi']))
        if 'item_type' in params:
            query_params.append(('item_type', params['item_type']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/institution/articles', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[Article]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_institution_details(self, **kwargs):
        """
        Private Account Institutions
        Account institution details
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_institution_details(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: Institution
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_institution_details_with_http_info(**kwargs)
        else:
            (data) = self.private_institution_details_with_http_info(**kwargs)
            return data

    def private_institution_details_with_http_info(self, **kwargs):
        """
        Private Account Institutions
        Account institution details
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_institution_details_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: Institution
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_institution_details" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/institution', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Institution',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_institution_embargo_options_details(self, **kwargs):
        """
        Private Account Institution embargo options
        Account institution embargo options details
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_institution_embargo_options_details(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: list[GroupEmbargoOptions]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_institution_embargo_options_details_with_http_info(**kwargs)
        else:
            (data) = self.private_institution_embargo_options_details_with_http_info(**kwargs)
            return data

    def private_institution_embargo_options_details_with_http_info(self, **kwargs):
        """
        Private Account Institution embargo options
        Account institution embargo options details
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_institution_embargo_options_details_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: list[GroupEmbargoOptions]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_institution_embargo_options_details" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/institution/embargo_options', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[GroupEmbargoOptions]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_institution_groups_list(self, **kwargs):
        """
        Private Account Institution Groups
        Returns the groups for which the account has administrative privileges (assigned and inherited).
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_institution_groups_list(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: list[Group]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_institution_groups_list_with_http_info(**kwargs)
        else:
            (data) = self.private_institution_groups_list_with_http_info(**kwargs)
            return data

    def private_institution_groups_list_with_http_info(self, **kwargs):
        """
        Private Account Institution Groups
        Returns the groups for which the account has administrative privileges (assigned and inherited).
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_institution_groups_list_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: list[Group]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_institution_groups_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/institution/groups', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[Group]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_institution_roles_list(self, **kwargs):
        """
        Private Account Institution Roles
        Returns the roles available for groups and the institution group.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_institution_roles_list(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: list[Role]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_institution_roles_list_with_http_info(**kwargs)
        else:
            (data) = self.private_institution_roles_list_with_http_info(**kwargs)
            return data

    def private_institution_roles_list_with_http_info(self, **kwargs):
        """
        Private Account Institution Roles
        Returns the roles available for groups and the institution group.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_institution_roles_list_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: list[Role]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_institution_roles_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/institution/roles', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[Role]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
