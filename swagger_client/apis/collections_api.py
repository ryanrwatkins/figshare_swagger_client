# coding: utf-8

"""
    Figshare API

    Figshare apiv2. Using Swagger 2.0

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class CollectionsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def collection_articles(self, collection_id, **kwargs):
        """
        Public Collection Articles
        Returns a list of public collection articles
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.collection_articles(collection_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int collection_id: Collection Unique identifier (required)
        :param int page: Page number. Used for pagination with page_size
        :param int page_size: The number of results included on a page. Used for pagination with page
        :param int limit: Number of results included on a page. Used for pagination with query
        :param int offset: Where to start the listing(the offset of the first result). Used for pagination with limit
        :return: list[Article]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.collection_articles_with_http_info(collection_id, **kwargs)
        else:
            (data) = self.collection_articles_with_http_info(collection_id, **kwargs)
            return data

    def collection_articles_with_http_info(self, collection_id, **kwargs):
        """
        Public Collection Articles
        Returns a list of public collection articles
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.collection_articles_with_http_info(collection_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int collection_id: Collection Unique identifier (required)
        :param int page: Page number. Used for pagination with page_size
        :param int page_size: The number of results included on a page. Used for pagination with page
        :param int limit: Number of results included on a page. Used for pagination with query
        :param int offset: Where to start the listing(the offset of the first result). Used for pagination with limit
        :return: list[Article]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection_id', 'page', 'page_size', 'limit', 'offset']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method collection_articles" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection_id' is set
        if ('collection_id' not in params) or (params['collection_id'] is None):
            raise ValueError("Missing the required parameter `collection_id` when calling `collection_articles`")

        if 'collection_id' in params and params['collection_id'] < 1:
            raise ValueError("Invalid value for parameter `collection_id` when calling `collection_articles`, must be a value greater than or equal to `1`")
        if 'page' in params and params['page'] > 5000:
            raise ValueError("Invalid value for parameter `page` when calling `collection_articles`, must be a value less than or equal to `5000`")
        if 'page' in params and params['page'] < 1:
            raise ValueError("Invalid value for parameter `page` when calling `collection_articles`, must be a value greater than or equal to `1`")
        if 'page_size' in params and params['page_size'] > 1000:
            raise ValueError("Invalid value for parameter `page_size` when calling `collection_articles`, must be a value less than or equal to `1000`")
        if 'page_size' in params and params['page_size'] < 1:
            raise ValueError("Invalid value for parameter `page_size` when calling `collection_articles`, must be a value greater than or equal to `1`")
        if 'limit' in params and params['limit'] > 1000:
            raise ValueError("Invalid value for parameter `limit` when calling `collection_articles`, must be a value less than or equal to `1000`")
        if 'limit' in params and params['limit'] < 1:
            raise ValueError("Invalid value for parameter `limit` when calling `collection_articles`, must be a value greater than or equal to `1`")
        if 'offset' in params and params['offset'] > 5000:
            raise ValueError("Invalid value for parameter `offset` when calling `collection_articles`, must be a value less than or equal to `5000`")
        if 'offset' in params and params['offset'] < 0:
            raise ValueError("Invalid value for parameter `offset` when calling `collection_articles`, must be a value greater than or equal to `0`")

        collection_formats = {}

        path_params = {}
        if 'collection_id' in params:
            path_params['collection_id'] = params['collection_id']

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))
        if 'limit' in params:
            query_params.append(('limit', params['limit']))
        if 'offset' in params:
            query_params.append(('offset', params['offset']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/collections/{collection_id}/articles', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[Article]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def collection_details(self, collection_id, **kwargs):
        """
        Collection details
        View a collection
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.collection_details(collection_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int collection_id: Collection Unique identifier (required)
        :return: CollectionComplete
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.collection_details_with_http_info(collection_id, **kwargs)
        else:
            (data) = self.collection_details_with_http_info(collection_id, **kwargs)
            return data

    def collection_details_with_http_info(self, collection_id, **kwargs):
        """
        Collection details
        View a collection
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.collection_details_with_http_info(collection_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int collection_id: Collection Unique identifier (required)
        :return: CollectionComplete
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method collection_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection_id' is set
        if ('collection_id' not in params) or (params['collection_id'] is None):
            raise ValueError("Missing the required parameter `collection_id` when calling `collection_details`")

        if 'collection_id' in params and params['collection_id'] < 1:
            raise ValueError("Invalid value for parameter `collection_id` when calling `collection_details`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'collection_id' in params:
            path_params['collection_id'] = params['collection_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/collections/{collection_id}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CollectionComplete',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def collection_version_details(self, collection_id, version_id, **kwargs):
        """
        Collection Version details
        View details for a certain version of a collection
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.collection_version_details(collection_id, version_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int collection_id: Collection Unique identifier (required)
        :param int version_id: Version Number (required)
        :return: CollectionComplete
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.collection_version_details_with_http_info(collection_id, version_id, **kwargs)
        else:
            (data) = self.collection_version_details_with_http_info(collection_id, version_id, **kwargs)
            return data

    def collection_version_details_with_http_info(self, collection_id, version_id, **kwargs):
        """
        Collection Version details
        View details for a certain version of a collection
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.collection_version_details_with_http_info(collection_id, version_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int collection_id: Collection Unique identifier (required)
        :param int version_id: Version Number (required)
        :return: CollectionComplete
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection_id', 'version_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method collection_version_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection_id' is set
        if ('collection_id' not in params) or (params['collection_id'] is None):
            raise ValueError("Missing the required parameter `collection_id` when calling `collection_version_details`")
        # verify the required parameter 'version_id' is set
        if ('version_id' not in params) or (params['version_id'] is None):
            raise ValueError("Missing the required parameter `version_id` when calling `collection_version_details`")

        if 'collection_id' in params and params['collection_id'] < 1:
            raise ValueError("Invalid value for parameter `collection_id` when calling `collection_version_details`, must be a value greater than or equal to `1`")
        if 'version_id' in params and params['version_id'] < 1:
            raise ValueError("Invalid value for parameter `version_id` when calling `collection_version_details`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'collection_id' in params:
            path_params['collection_id'] = params['collection_id']
        if 'version_id' in params:
            path_params['version_id'] = params['version_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/collections/{collection_id}/versions/{version_id}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CollectionComplete',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def collection_versions(self, collection_id, **kwargs):
        """
        Collection Versions list
        Returns a list of public collection Versions
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.collection_versions(collection_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int collection_id: Collection Unique identifier (required)
        :return: list[CollectionVersions]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.collection_versions_with_http_info(collection_id, **kwargs)
        else:
            (data) = self.collection_versions_with_http_info(collection_id, **kwargs)
            return data

    def collection_versions_with_http_info(self, collection_id, **kwargs):
        """
        Collection Versions list
        Returns a list of public collection Versions
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.collection_versions_with_http_info(collection_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int collection_id: Collection Unique identifier (required)
        :return: list[CollectionVersions]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method collection_versions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection_id' is set
        if ('collection_id' not in params) or (params['collection_id'] is None):
            raise ValueError("Missing the required parameter `collection_id` when calling `collection_versions`")

        if 'collection_id' in params and params['collection_id'] < 1:
            raise ValueError("Invalid value for parameter `collection_id` when calling `collection_versions`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'collection_id' in params:
            path_params['collection_id'] = params['collection_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/collections/{collection_id}/versions', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[CollectionVersions]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def collections_list(self, **kwargs):
        """
        Public Collections
        Returns a list of public collections
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.collections_list(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_cursor: Unique hash used for bypassing the item retrieval limit of 9,000 entities. When using this parameter, please note that the offset parameter will not be available, but the limit parameter will still work as expected.
        :param int page: Page number. Used for pagination with page_size
        :param int page_size: The number of results included on a page. Used for pagination with page
        :param int limit: Number of results included on a page. Used for pagination with query
        :param int offset: Where to start the listing(the offset of the first result). Used for pagination with limit
        :param str order: The field by which to order. Default varies by endpoint/resource.
        :param str order_direction:
        :param int institution: only return collections from this institution
        :param str published_since: Filter by collection publishing date. Will only return collections published after the date. date(ISO 8601) YYYY-MM-DD
        :param str modified_since: Filter by collection modified date. Will only return collections published after the date. date(ISO 8601) YYYY-MM-DD
        :param int group: only return collections from this group
        :param str resource_doi: only return collections with this resource_doi
        :param str doi: only return collections with this doi
        :param str handle: only return collections with this handle
        :return: list[Collection]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.collections_list_with_http_info(**kwargs)
        else:
            (data) = self.collections_list_with_http_info(**kwargs)
            return data

    def collections_list_with_http_info(self, **kwargs):
        """
        Public Collections
        Returns a list of public collections
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.collections_list_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_cursor: Unique hash used for bypassing the item retrieval limit of 9,000 entities. When using this parameter, please note that the offset parameter will not be available, but the limit parameter will still work as expected.
        :param int page: Page number. Used for pagination with page_size
        :param int page_size: The number of results included on a page. Used for pagination with page
        :param int limit: Number of results included on a page. Used for pagination with query
        :param int offset: Where to start the listing(the offset of the first result). Used for pagination with limit
        :param str order: The field by which to order. Default varies by endpoint/resource.
        :param str order_direction:
        :param int institution: only return collections from this institution
        :param str published_since: Filter by collection publishing date. Will only return collections published after the date. date(ISO 8601) YYYY-MM-DD
        :param str modified_since: Filter by collection modified date. Will only return collections published after the date. date(ISO 8601) YYYY-MM-DD
        :param int group: only return collections from this group
        :param str resource_doi: only return collections with this resource_doi
        :param str doi: only return collections with this doi
        :param str handle: only return collections with this handle
        :return: list[Collection]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_cursor', 'page', 'page_size', 'limit', 'offset', 'order', 'order_direction', 'institution', 'published_since', 'modified_since', 'group', 'resource_doi', 'doi', 'handle']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method collections_list" % key
                )
            params[key] = val
        del params['kwargs']

        if 'page' in params and params['page'] > 5000:
            raise ValueError("Invalid value for parameter `page` when calling `collections_list`, must be a value less than or equal to `5000`")
        if 'page' in params and params['page'] < 1:
            raise ValueError("Invalid value for parameter `page` when calling `collections_list`, must be a value greater than or equal to `1`")
        if 'page_size' in params and params['page_size'] > 1000:
            raise ValueError("Invalid value for parameter `page_size` when calling `collections_list`, must be a value less than or equal to `1000`")
        if 'page_size' in params and params['page_size'] < 1:
            raise ValueError("Invalid value for parameter `page_size` when calling `collections_list`, must be a value greater than or equal to `1`")
        if 'limit' in params and params['limit'] > 1000:
            raise ValueError("Invalid value for parameter `limit` when calling `collections_list`, must be a value less than or equal to `1000`")
        if 'limit' in params and params['limit'] < 1:
            raise ValueError("Invalid value for parameter `limit` when calling `collections_list`, must be a value greater than or equal to `1`")
        if 'offset' in params and params['offset'] > 5000:
            raise ValueError("Invalid value for parameter `offset` when calling `collections_list`, must be a value less than or equal to `5000`")
        if 'offset' in params and params['offset'] < 0:
            raise ValueError("Invalid value for parameter `offset` when calling `collections_list`, must be a value greater than or equal to `0`")

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))
        if 'limit' in params:
            query_params.append(('limit', params['limit']))
        if 'offset' in params:
            query_params.append(('offset', params['offset']))
        if 'order' in params:
            query_params.append(('order', params['order']))
        if 'order_direction' in params:
            query_params.append(('order_direction', params['order_direction']))
        if 'institution' in params:
            query_params.append(('institution', params['institution']))
        if 'published_since' in params:
            query_params.append(('published_since', params['published_since']))
        if 'modified_since' in params:
            query_params.append(('modified_since', params['modified_since']))
        if 'group' in params:
            query_params.append(('group', params['group']))
        if 'resource_doi' in params:
            query_params.append(('resource_doi', params['resource_doi']))
        if 'doi' in params:
            query_params.append(('doi', params['doi']))
        if 'handle' in params:
            query_params.append(('handle', params['handle']))

        header_params = {}
        if 'x_cursor' in params:
            header_params['X-Cursor'] = params['x_cursor']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/collections', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[Collection]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def collections_search(self, **kwargs):
        """
        Public Collections Search
        Returns a list of public collections
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.collections_search(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_cursor: Unique hash used for bypassing the item retrieval limit of 9,000 entities. When using this parameter, please note that the offset parameter will not be available, but the limit parameter will still work as expected.
        :param CollectionSearch search: Search Parameters
        :return: list[Collection]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.collections_search_with_http_info(**kwargs)
        else:
            (data) = self.collections_search_with_http_info(**kwargs)
            return data

    def collections_search_with_http_info(self, **kwargs):
        """
        Public Collections Search
        Returns a list of public collections
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.collections_search_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_cursor: Unique hash used for bypassing the item retrieval limit of 9,000 entities. When using this parameter, please note that the offset parameter will not be available, but the limit parameter will still work as expected.
        :param CollectionSearch search: Search Parameters
        :return: list[Collection]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_cursor', 'search']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method collections_search" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_cursor' in params:
            header_params['X-Cursor'] = params['x_cursor']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'search' in params:
            body_params = params['search']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/collections/search', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[Collection]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_collection_article_delete(self, collection_id, article_id, **kwargs):
        """
        Delete collection article
        De-associate article from collection
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_collection_article_delete(collection_id, article_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int collection_id: Collection unique identifier (required)
        :param int article_id: Collection article unique identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_collection_article_delete_with_http_info(collection_id, article_id, **kwargs)
        else:
            (data) = self.private_collection_article_delete_with_http_info(collection_id, article_id, **kwargs)
            return data

    def private_collection_article_delete_with_http_info(self, collection_id, article_id, **kwargs):
        """
        Delete collection article
        De-associate article from collection
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_collection_article_delete_with_http_info(collection_id, article_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int collection_id: Collection unique identifier (required)
        :param int article_id: Collection article unique identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection_id', 'article_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_collection_article_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection_id' is set
        if ('collection_id' not in params) or (params['collection_id'] is None):
            raise ValueError("Missing the required parameter `collection_id` when calling `private_collection_article_delete`")
        # verify the required parameter 'article_id' is set
        if ('article_id' not in params) or (params['article_id'] is None):
            raise ValueError("Missing the required parameter `article_id` when calling `private_collection_article_delete`")

        if 'collection_id' in params and params['collection_id'] < 1:
            raise ValueError("Invalid value for parameter `collection_id` when calling `private_collection_article_delete`, must be a value greater than or equal to `1`")
        if 'article_id' in params and params['article_id'] < 1:
            raise ValueError("Invalid value for parameter `article_id` when calling `private_collection_article_delete`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'collection_id' in params:
            path_params['collection_id'] = params['collection_id']
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/collections/{collection_id}/articles/{article_id}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_collection_articles_add(self, collection_id, articles, **kwargs):
        """
        Add collection articles
        Associate new articles with the collection. This will add new articles to the list of already associated articles
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_collection_articles_add(collection_id, articles, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int collection_id: Collection unique identifier (required)
        :param ArticlesCreator articles: Articles list (required)
        :return: Location
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_collection_articles_add_with_http_info(collection_id, articles, **kwargs)
        else:
            (data) = self.private_collection_articles_add_with_http_info(collection_id, articles, **kwargs)
            return data

    def private_collection_articles_add_with_http_info(self, collection_id, articles, **kwargs):
        """
        Add collection articles
        Associate new articles with the collection. This will add new articles to the list of already associated articles
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_collection_articles_add_with_http_info(collection_id, articles, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int collection_id: Collection unique identifier (required)
        :param ArticlesCreator articles: Articles list (required)
        :return: Location
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection_id', 'articles']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_collection_articles_add" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection_id' is set
        if ('collection_id' not in params) or (params['collection_id'] is None):
            raise ValueError("Missing the required parameter `collection_id` when calling `private_collection_articles_add`")
        # verify the required parameter 'articles' is set
        if ('articles' not in params) or (params['articles'] is None):
            raise ValueError("Missing the required parameter `articles` when calling `private_collection_articles_add`")

        if 'collection_id' in params and params['collection_id'] < 1:
            raise ValueError("Invalid value for parameter `collection_id` when calling `private_collection_articles_add`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'collection_id' in params:
            path_params['collection_id'] = params['collection_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'articles' in params:
            body_params = params['articles']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/collections/{collection_id}/articles', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Location',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_collection_articles_list(self, collection_id, **kwargs):
        """
        List collection articles
        List collection articles
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_collection_articles_list(collection_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int collection_id: Collection unique identifier (required)
        :param int page: Page number. Used for pagination with page_size
        :param int page_size: The number of results included on a page. Used for pagination with page
        :param int limit: Number of results included on a page. Used for pagination with query
        :param int offset: Where to start the listing(the offset of the first result). Used for pagination with limit
        :return: list[Article]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_collection_articles_list_with_http_info(collection_id, **kwargs)
        else:
            (data) = self.private_collection_articles_list_with_http_info(collection_id, **kwargs)
            return data

    def private_collection_articles_list_with_http_info(self, collection_id, **kwargs):
        """
        List collection articles
        List collection articles
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_collection_articles_list_with_http_info(collection_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int collection_id: Collection unique identifier (required)
        :param int page: Page number. Used for pagination with page_size
        :param int page_size: The number of results included on a page. Used for pagination with page
        :param int limit: Number of results included on a page. Used for pagination with query
        :param int offset: Where to start the listing(the offset of the first result). Used for pagination with limit
        :return: list[Article]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection_id', 'page', 'page_size', 'limit', 'offset']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_collection_articles_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection_id' is set
        if ('collection_id' not in params) or (params['collection_id'] is None):
            raise ValueError("Missing the required parameter `collection_id` when calling `private_collection_articles_list`")

        if 'collection_id' in params and params['collection_id'] < 1:
            raise ValueError("Invalid value for parameter `collection_id` when calling `private_collection_articles_list`, must be a value greater than or equal to `1`")
        if 'page' in params and params['page'] > 5000:
            raise ValueError("Invalid value for parameter `page` when calling `private_collection_articles_list`, must be a value less than or equal to `5000`")
        if 'page' in params and params['page'] < 1:
            raise ValueError("Invalid value for parameter `page` when calling `private_collection_articles_list`, must be a value greater than or equal to `1`")
        if 'page_size' in params and params['page_size'] > 1000:
            raise ValueError("Invalid value for parameter `page_size` when calling `private_collection_articles_list`, must be a value less than or equal to `1000`")
        if 'page_size' in params and params['page_size'] < 1:
            raise ValueError("Invalid value for parameter `page_size` when calling `private_collection_articles_list`, must be a value greater than or equal to `1`")
        if 'limit' in params and params['limit'] > 1000:
            raise ValueError("Invalid value for parameter `limit` when calling `private_collection_articles_list`, must be a value less than or equal to `1000`")
        if 'limit' in params and params['limit'] < 1:
            raise ValueError("Invalid value for parameter `limit` when calling `private_collection_articles_list`, must be a value greater than or equal to `1`")
        if 'offset' in params and params['offset'] > 5000:
            raise ValueError("Invalid value for parameter `offset` when calling `private_collection_articles_list`, must be a value less than or equal to `5000`")
        if 'offset' in params and params['offset'] < 0:
            raise ValueError("Invalid value for parameter `offset` when calling `private_collection_articles_list`, must be a value greater than or equal to `0`")

        collection_formats = {}

        path_params = {}
        if 'collection_id' in params:
            path_params['collection_id'] = params['collection_id']

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))
        if 'limit' in params:
            query_params.append(('limit', params['limit']))
        if 'offset' in params:
            query_params.append(('offset', params['offset']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/collections/{collection_id}/articles', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[Article]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_collection_articles_replace(self, collection_id, articles, **kwargs):
        """
        Replace collection articles
        Associate new articles with the collection. This will remove all already associated articles and add these new ones
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_collection_articles_replace(collection_id, articles, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int collection_id: Collection unique identifier (required)
        :param ArticlesCreator articles: Articles List (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_collection_articles_replace_with_http_info(collection_id, articles, **kwargs)
        else:
            (data) = self.private_collection_articles_replace_with_http_info(collection_id, articles, **kwargs)
            return data

    def private_collection_articles_replace_with_http_info(self, collection_id, articles, **kwargs):
        """
        Replace collection articles
        Associate new articles with the collection. This will remove all already associated articles and add these new ones
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_collection_articles_replace_with_http_info(collection_id, articles, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int collection_id: Collection unique identifier (required)
        :param ArticlesCreator articles: Articles List (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection_id', 'articles']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_collection_articles_replace" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection_id' is set
        if ('collection_id' not in params) or (params['collection_id'] is None):
            raise ValueError("Missing the required parameter `collection_id` when calling `private_collection_articles_replace`")
        # verify the required parameter 'articles' is set
        if ('articles' not in params) or (params['articles'] is None):
            raise ValueError("Missing the required parameter `articles` when calling `private_collection_articles_replace`")

        if 'collection_id' in params and params['collection_id'] < 1:
            raise ValueError("Invalid value for parameter `collection_id` when calling `private_collection_articles_replace`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'collection_id' in params:
            path_params['collection_id'] = params['collection_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'articles' in params:
            body_params = params['articles']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/collections/{collection_id}/articles', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_collection_author_delete(self, collection_id, author_id, **kwargs):
        """
        Delete collection author
        Delete collection author
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_collection_author_delete(collection_id, author_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int collection_id: Collection unique identifier (required)
        :param int author_id: Collection Author unique identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_collection_author_delete_with_http_info(collection_id, author_id, **kwargs)
        else:
            (data) = self.private_collection_author_delete_with_http_info(collection_id, author_id, **kwargs)
            return data

    def private_collection_author_delete_with_http_info(self, collection_id, author_id, **kwargs):
        """
        Delete collection author
        Delete collection author
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_collection_author_delete_with_http_info(collection_id, author_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int collection_id: Collection unique identifier (required)
        :param int author_id: Collection Author unique identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection_id', 'author_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_collection_author_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection_id' is set
        if ('collection_id' not in params) or (params['collection_id'] is None):
            raise ValueError("Missing the required parameter `collection_id` when calling `private_collection_author_delete`")
        # verify the required parameter 'author_id' is set
        if ('author_id' not in params) or (params['author_id'] is None):
            raise ValueError("Missing the required parameter `author_id` when calling `private_collection_author_delete`")

        if 'collection_id' in params and params['collection_id'] < 1:
            raise ValueError("Invalid value for parameter `collection_id` when calling `private_collection_author_delete`, must be a value greater than or equal to `1`")
        if 'author_id' in params and params['author_id'] < 1:
            raise ValueError("Invalid value for parameter `author_id` when calling `private_collection_author_delete`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'collection_id' in params:
            path_params['collection_id'] = params['collection_id']
        if 'author_id' in params:
            path_params['author_id'] = params['author_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/collections/{collection_id}/authors/{author_id}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_collection_authors_add(self, collection_id, authors, **kwargs):
        """
        Add collection authors
        Associate new authors with the collection. This will add new authors to the list of already associated authors
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_collection_authors_add(collection_id, authors, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int collection_id: Collection unique identifier (required)
        :param AuthorsCreator authors: List of authors (required)
        :return: Location
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_collection_authors_add_with_http_info(collection_id, authors, **kwargs)
        else:
            (data) = self.private_collection_authors_add_with_http_info(collection_id, authors, **kwargs)
            return data

    def private_collection_authors_add_with_http_info(self, collection_id, authors, **kwargs):
        """
        Add collection authors
        Associate new authors with the collection. This will add new authors to the list of already associated authors
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_collection_authors_add_with_http_info(collection_id, authors, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int collection_id: Collection unique identifier (required)
        :param AuthorsCreator authors: List of authors (required)
        :return: Location
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection_id', 'authors']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_collection_authors_add" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection_id' is set
        if ('collection_id' not in params) or (params['collection_id'] is None):
            raise ValueError("Missing the required parameter `collection_id` when calling `private_collection_authors_add`")
        # verify the required parameter 'authors' is set
        if ('authors' not in params) or (params['authors'] is None):
            raise ValueError("Missing the required parameter `authors` when calling `private_collection_authors_add`")

        if 'collection_id' in params and params['collection_id'] < 1:
            raise ValueError("Invalid value for parameter `collection_id` when calling `private_collection_authors_add`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'collection_id' in params:
            path_params['collection_id'] = params['collection_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'authors' in params:
            body_params = params['authors']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/collections/{collection_id}/authors', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Location',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_collection_authors_list(self, collection_id, **kwargs):
        """
        List collection authors
        List collection authors
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_collection_authors_list(collection_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int collection_id: Collection unique identifier (required)
        :return: list[Author]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_collection_authors_list_with_http_info(collection_id, **kwargs)
        else:
            (data) = self.private_collection_authors_list_with_http_info(collection_id, **kwargs)
            return data

    def private_collection_authors_list_with_http_info(self, collection_id, **kwargs):
        """
        List collection authors
        List collection authors
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_collection_authors_list_with_http_info(collection_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int collection_id: Collection unique identifier (required)
        :return: list[Author]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_collection_authors_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection_id' is set
        if ('collection_id' not in params) or (params['collection_id'] is None):
            raise ValueError("Missing the required parameter `collection_id` when calling `private_collection_authors_list`")

        if 'collection_id' in params and params['collection_id'] < 1:
            raise ValueError("Invalid value for parameter `collection_id` when calling `private_collection_authors_list`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'collection_id' in params:
            path_params['collection_id'] = params['collection_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/collections/{collection_id}/authors', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[Author]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_collection_authors_replace(self, collection_id, authors, **kwargs):
        """
        Replace collection authors
        Associate new authors with the collection. This will remove all already associated authors and add these new ones
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_collection_authors_replace(collection_id, authors, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int collection_id: Collection unique identifier (required)
        :param AuthorsCreator authors: List of authors (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_collection_authors_replace_with_http_info(collection_id, authors, **kwargs)
        else:
            (data) = self.private_collection_authors_replace_with_http_info(collection_id, authors, **kwargs)
            return data

    def private_collection_authors_replace_with_http_info(self, collection_id, authors, **kwargs):
        """
        Replace collection authors
        Associate new authors with the collection. This will remove all already associated authors and add these new ones
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_collection_authors_replace_with_http_info(collection_id, authors, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int collection_id: Collection unique identifier (required)
        :param AuthorsCreator authors: List of authors (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection_id', 'authors']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_collection_authors_replace" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection_id' is set
        if ('collection_id' not in params) or (params['collection_id'] is None):
            raise ValueError("Missing the required parameter `collection_id` when calling `private_collection_authors_replace`")
        # verify the required parameter 'authors' is set
        if ('authors' not in params) or (params['authors'] is None):
            raise ValueError("Missing the required parameter `authors` when calling `private_collection_authors_replace`")

        if 'collection_id' in params and params['collection_id'] < 1:
            raise ValueError("Invalid value for parameter `collection_id` when calling `private_collection_authors_replace`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'collection_id' in params:
            path_params['collection_id'] = params['collection_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'authors' in params:
            body_params = params['authors']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/collections/{collection_id}/authors', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_collection_categories_add(self, collection_id, categories, **kwargs):
        """
        Add collection categories
        Associate new categories with the collection. This will add new categories to the list of already associated categories
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_collection_categories_add(collection_id, categories, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int collection_id: Collection unique identifier (required)
        :param CategoriesCreator categories: Categories list (required)
        :return: Location
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_collection_categories_add_with_http_info(collection_id, categories, **kwargs)
        else:
            (data) = self.private_collection_categories_add_with_http_info(collection_id, categories, **kwargs)
            return data

    def private_collection_categories_add_with_http_info(self, collection_id, categories, **kwargs):
        """
        Add collection categories
        Associate new categories with the collection. This will add new categories to the list of already associated categories
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_collection_categories_add_with_http_info(collection_id, categories, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int collection_id: Collection unique identifier (required)
        :param CategoriesCreator categories: Categories list (required)
        :return: Location
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection_id', 'categories']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_collection_categories_add" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection_id' is set
        if ('collection_id' not in params) or (params['collection_id'] is None):
            raise ValueError("Missing the required parameter `collection_id` when calling `private_collection_categories_add`")
        # verify the required parameter 'categories' is set
        if ('categories' not in params) or (params['categories'] is None):
            raise ValueError("Missing the required parameter `categories` when calling `private_collection_categories_add`")

        if 'collection_id' in params and params['collection_id'] < 1:
            raise ValueError("Invalid value for parameter `collection_id` when calling `private_collection_categories_add`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'collection_id' in params:
            path_params['collection_id'] = params['collection_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'categories' in params:
            body_params = params['categories']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/collections/{collection_id}/categories', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Location',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_collection_categories_list(self, collection_id, **kwargs):
        """
        List collection categories
        List collection categories
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_collection_categories_list(collection_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int collection_id: Collection unique identifier (required)
        :return: list[Category]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_collection_categories_list_with_http_info(collection_id, **kwargs)
        else:
            (data) = self.private_collection_categories_list_with_http_info(collection_id, **kwargs)
            return data

    def private_collection_categories_list_with_http_info(self, collection_id, **kwargs):
        """
        List collection categories
        List collection categories
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_collection_categories_list_with_http_info(collection_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int collection_id: Collection unique identifier (required)
        :return: list[Category]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_collection_categories_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection_id' is set
        if ('collection_id' not in params) or (params['collection_id'] is None):
            raise ValueError("Missing the required parameter `collection_id` when calling `private_collection_categories_list`")

        if 'collection_id' in params and params['collection_id'] < 1:
            raise ValueError("Invalid value for parameter `collection_id` when calling `private_collection_categories_list`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'collection_id' in params:
            path_params['collection_id'] = params['collection_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/collections/{collection_id}/categories', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[Category]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_collection_categories_replace(self, collection_id, categories, **kwargs):
        """
        Replace collection categories
        Associate new categories with the collection. This will remove all already associated categories and add these new ones
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_collection_categories_replace(collection_id, categories, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int collection_id: Collection unique identifier (required)
        :param CategoriesCreator categories: Categories list (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_collection_categories_replace_with_http_info(collection_id, categories, **kwargs)
        else:
            (data) = self.private_collection_categories_replace_with_http_info(collection_id, categories, **kwargs)
            return data

    def private_collection_categories_replace_with_http_info(self, collection_id, categories, **kwargs):
        """
        Replace collection categories
        Associate new categories with the collection. This will remove all already associated categories and add these new ones
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_collection_categories_replace_with_http_info(collection_id, categories, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int collection_id: Collection unique identifier (required)
        :param CategoriesCreator categories: Categories list (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection_id', 'categories']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_collection_categories_replace" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection_id' is set
        if ('collection_id' not in params) or (params['collection_id'] is None):
            raise ValueError("Missing the required parameter `collection_id` when calling `private_collection_categories_replace`")
        # verify the required parameter 'categories' is set
        if ('categories' not in params) or (params['categories'] is None):
            raise ValueError("Missing the required parameter `categories` when calling `private_collection_categories_replace`")

        if 'collection_id' in params and params['collection_id'] < 1:
            raise ValueError("Invalid value for parameter `collection_id` when calling `private_collection_categories_replace`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'collection_id' in params:
            path_params['collection_id'] = params['collection_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'categories' in params:
            body_params = params['categories']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/collections/{collection_id}/categories', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_collection_category_delete(self, collection_id, category_id, **kwargs):
        """
        Delete collection category
        De-associate category from collection
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_collection_category_delete(collection_id, category_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int collection_id: Collection unique identifier (required)
        :param int category_id: Collection category unique identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_collection_category_delete_with_http_info(collection_id, category_id, **kwargs)
        else:
            (data) = self.private_collection_category_delete_with_http_info(collection_id, category_id, **kwargs)
            return data

    def private_collection_category_delete_with_http_info(self, collection_id, category_id, **kwargs):
        """
        Delete collection category
        De-associate category from collection
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_collection_category_delete_with_http_info(collection_id, category_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int collection_id: Collection unique identifier (required)
        :param int category_id: Collection category unique identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection_id', 'category_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_collection_category_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection_id' is set
        if ('collection_id' not in params) or (params['collection_id'] is None):
            raise ValueError("Missing the required parameter `collection_id` when calling `private_collection_category_delete`")
        # verify the required parameter 'category_id' is set
        if ('category_id' not in params) or (params['category_id'] is None):
            raise ValueError("Missing the required parameter `category_id` when calling `private_collection_category_delete`")

        if 'collection_id' in params and params['collection_id'] < 1:
            raise ValueError("Invalid value for parameter `collection_id` when calling `private_collection_category_delete`, must be a value greater than or equal to `1`")
        if 'category_id' in params and params['category_id'] < 1:
            raise ValueError("Invalid value for parameter `category_id` when calling `private_collection_category_delete`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'collection_id' in params:
            path_params['collection_id'] = params['collection_id']
        if 'category_id' in params:
            path_params['category_id'] = params['category_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/collections/{collection_id}/categories/{category_id}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_collection_create(self, collection, **kwargs):
        """
        Create collection
        Create a new Collection by sending collection information
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_collection_create(collection, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CollectionCreate collection: Collection description (required)
        :return: LocationWarnings
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_collection_create_with_http_info(collection, **kwargs)
        else:
            (data) = self.private_collection_create_with_http_info(collection, **kwargs)
            return data

    def private_collection_create_with_http_info(self, collection, **kwargs):
        """
        Create collection
        Create a new Collection by sending collection information
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_collection_create_with_http_info(collection, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CollectionCreate collection: Collection description (required)
        :return: LocationWarnings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_collection_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection' is set
        if ('collection' not in params) or (params['collection'] is None):
            raise ValueError("Missing the required parameter `collection` when calling `private_collection_create`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'collection' in params:
            body_params = params['collection']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/collections', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='LocationWarnings',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_collection_delete(self, collection_id, **kwargs):
        """
        Delete collection
        Delete n collection
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_collection_delete(collection_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int collection_id: Collection Unique identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_collection_delete_with_http_info(collection_id, **kwargs)
        else:
            (data) = self.private_collection_delete_with_http_info(collection_id, **kwargs)
            return data

    def private_collection_delete_with_http_info(self, collection_id, **kwargs):
        """
        Delete collection
        Delete n collection
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_collection_delete_with_http_info(collection_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int collection_id: Collection Unique identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_collection_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection_id' is set
        if ('collection_id' not in params) or (params['collection_id'] is None):
            raise ValueError("Missing the required parameter `collection_id` when calling `private_collection_delete`")

        if 'collection_id' in params and params['collection_id'] < 1:
            raise ValueError("Invalid value for parameter `collection_id` when calling `private_collection_delete`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'collection_id' in params:
            path_params['collection_id'] = params['collection_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/collections/{collection_id}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_collection_details(self, collection_id, **kwargs):
        """
        Collection details
        View a collection
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_collection_details(collection_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int collection_id: Collection Unique identifier (required)
        :return: CollectionCompletePrivate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_collection_details_with_http_info(collection_id, **kwargs)
        else:
            (data) = self.private_collection_details_with_http_info(collection_id, **kwargs)
            return data

    def private_collection_details_with_http_info(self, collection_id, **kwargs):
        """
        Collection details
        View a collection
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_collection_details_with_http_info(collection_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int collection_id: Collection Unique identifier (required)
        :return: CollectionCompletePrivate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_collection_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection_id' is set
        if ('collection_id' not in params) or (params['collection_id'] is None):
            raise ValueError("Missing the required parameter `collection_id` when calling `private_collection_details`")

        if 'collection_id' in params and params['collection_id'] < 1:
            raise ValueError("Invalid value for parameter `collection_id` when calling `private_collection_details`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'collection_id' in params:
            path_params['collection_id'] = params['collection_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/collections/{collection_id}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CollectionCompletePrivate',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_collection_private_link_create(self, collection_id, **kwargs):
        """
        Create collection private link
        Create new private link
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_collection_private_link_create(collection_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int collection_id: Collection unique identifier (required)
        :param CollectionPrivateLinkCreator private_link:
        :return: PrivateLinkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_collection_private_link_create_with_http_info(collection_id, **kwargs)
        else:
            (data) = self.private_collection_private_link_create_with_http_info(collection_id, **kwargs)
            return data

    def private_collection_private_link_create_with_http_info(self, collection_id, **kwargs):
        """
        Create collection private link
        Create new private link
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_collection_private_link_create_with_http_info(collection_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int collection_id: Collection unique identifier (required)
        :param CollectionPrivateLinkCreator private_link:
        :return: PrivateLinkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection_id', 'private_link']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_collection_private_link_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection_id' is set
        if ('collection_id' not in params) or (params['collection_id'] is None):
            raise ValueError("Missing the required parameter `collection_id` when calling `private_collection_private_link_create`")

        if 'collection_id' in params and params['collection_id'] < 1:
            raise ValueError("Invalid value for parameter `collection_id` when calling `private_collection_private_link_create`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'collection_id' in params:
            path_params['collection_id'] = params['collection_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'private_link' in params:
            body_params = params['private_link']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/collections/{collection_id}/private_links', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PrivateLinkResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_collection_private_link_delete(self, collection_id, link_id, **kwargs):
        """
        Disable private link
        Disable/delete private link for this collection
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_collection_private_link_delete(collection_id, link_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int collection_id: Collection unique identifier (required)
        :param str link_id: Private link token (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_collection_private_link_delete_with_http_info(collection_id, link_id, **kwargs)
        else:
            (data) = self.private_collection_private_link_delete_with_http_info(collection_id, link_id, **kwargs)
            return data

    def private_collection_private_link_delete_with_http_info(self, collection_id, link_id, **kwargs):
        """
        Disable private link
        Disable/delete private link for this collection
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_collection_private_link_delete_with_http_info(collection_id, link_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int collection_id: Collection unique identifier (required)
        :param str link_id: Private link token (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection_id', 'link_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_collection_private_link_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection_id' is set
        if ('collection_id' not in params) or (params['collection_id'] is None):
            raise ValueError("Missing the required parameter `collection_id` when calling `private_collection_private_link_delete`")
        # verify the required parameter 'link_id' is set
        if ('link_id' not in params) or (params['link_id'] is None):
            raise ValueError("Missing the required parameter `link_id` when calling `private_collection_private_link_delete`")

        if 'collection_id' in params and params['collection_id'] < 1:
            raise ValueError("Invalid value for parameter `collection_id` when calling `private_collection_private_link_delete`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'collection_id' in params:
            path_params['collection_id'] = params['collection_id']
        if 'link_id' in params:
            path_params['link_id'] = params['link_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/collections/{collection_id}/private_links/{link_id}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_collection_private_link_update(self, collection_id, link_id, **kwargs):
        """
        Update collection private link
        Update existing private link for this collection
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_collection_private_link_update(collection_id, link_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int collection_id: Collection unique identifier (required)
        :param str link_id: Private link token (required)
        :param CollectionPrivateLinkCreator private_link:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_collection_private_link_update_with_http_info(collection_id, link_id, **kwargs)
        else:
            (data) = self.private_collection_private_link_update_with_http_info(collection_id, link_id, **kwargs)
            return data

    def private_collection_private_link_update_with_http_info(self, collection_id, link_id, **kwargs):
        """
        Update collection private link
        Update existing private link for this collection
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_collection_private_link_update_with_http_info(collection_id, link_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int collection_id: Collection unique identifier (required)
        :param str link_id: Private link token (required)
        :param CollectionPrivateLinkCreator private_link:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection_id', 'link_id', 'private_link']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_collection_private_link_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection_id' is set
        if ('collection_id' not in params) or (params['collection_id'] is None):
            raise ValueError("Missing the required parameter `collection_id` when calling `private_collection_private_link_update`")
        # verify the required parameter 'link_id' is set
        if ('link_id' not in params) or (params['link_id'] is None):
            raise ValueError("Missing the required parameter `link_id` when calling `private_collection_private_link_update`")

        if 'collection_id' in params and params['collection_id'] < 1:
            raise ValueError("Invalid value for parameter `collection_id` when calling `private_collection_private_link_update`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'collection_id' in params:
            path_params['collection_id'] = params['collection_id']
        if 'link_id' in params:
            path_params['link_id'] = params['link_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'private_link' in params:
            body_params = params['private_link']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/collections/{collection_id}/private_links/{link_id}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_collection_private_links_list(self, collection_id, **kwargs):
        """
        List collection private links
        List article private links
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_collection_private_links_list(collection_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int collection_id: Collection unique identifier (required)
        :return: list[PrivateLink]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_collection_private_links_list_with_http_info(collection_id, **kwargs)
        else:
            (data) = self.private_collection_private_links_list_with_http_info(collection_id, **kwargs)
            return data

    def private_collection_private_links_list_with_http_info(self, collection_id, **kwargs):
        """
        List collection private links
        List article private links
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_collection_private_links_list_with_http_info(collection_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int collection_id: Collection unique identifier (required)
        :return: list[PrivateLink]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_collection_private_links_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection_id' is set
        if ('collection_id' not in params) or (params['collection_id'] is None):
            raise ValueError("Missing the required parameter `collection_id` when calling `private_collection_private_links_list`")

        if 'collection_id' in params and params['collection_id'] < 1:
            raise ValueError("Invalid value for parameter `collection_id` when calling `private_collection_private_links_list`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'collection_id' in params:
            path_params['collection_id'] = params['collection_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/collections/{collection_id}/private_links', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[PrivateLink]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_collection_publish(self, collection_id, **kwargs):
        """
        Private Collection Publish
        When a collection is published, a new public version will be generated. Any further updates to the collection will affect the private collection data. In order to make these changes publicly visible, an explicit publish operation is needed.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_collection_publish(collection_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int collection_id: Collection Unique identifier (required)
        :return: Location
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_collection_publish_with_http_info(collection_id, **kwargs)
        else:
            (data) = self.private_collection_publish_with_http_info(collection_id, **kwargs)
            return data

    def private_collection_publish_with_http_info(self, collection_id, **kwargs):
        """
        Private Collection Publish
        When a collection is published, a new public version will be generated. Any further updates to the collection will affect the private collection data. In order to make these changes publicly visible, an explicit publish operation is needed.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_collection_publish_with_http_info(collection_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int collection_id: Collection Unique identifier (required)
        :return: Location
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_collection_publish" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection_id' is set
        if ('collection_id' not in params) or (params['collection_id'] is None):
            raise ValueError("Missing the required parameter `collection_id` when calling `private_collection_publish`")

        if 'collection_id' in params and params['collection_id'] < 1:
            raise ValueError("Invalid value for parameter `collection_id` when calling `private_collection_publish`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'collection_id' in params:
            path_params['collection_id'] = params['collection_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/collections/{collection_id}/publish', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Location',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_collection_reserve_doi(self, collection_id, **kwargs):
        """
        Private Collection Reserve DOI
        Reserve DOI for collection
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_collection_reserve_doi(collection_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int collection_id: Collection Unique identifier (required)
        :return: CollectionDOI
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_collection_reserve_doi_with_http_info(collection_id, **kwargs)
        else:
            (data) = self.private_collection_reserve_doi_with_http_info(collection_id, **kwargs)
            return data

    def private_collection_reserve_doi_with_http_info(self, collection_id, **kwargs):
        """
        Private Collection Reserve DOI
        Reserve DOI for collection
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_collection_reserve_doi_with_http_info(collection_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int collection_id: Collection Unique identifier (required)
        :return: CollectionDOI
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_collection_reserve_doi" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection_id' is set
        if ('collection_id' not in params) or (params['collection_id'] is None):
            raise ValueError("Missing the required parameter `collection_id` when calling `private_collection_reserve_doi`")

        if 'collection_id' in params and params['collection_id'] < 1:
            raise ValueError("Invalid value for parameter `collection_id` when calling `private_collection_reserve_doi`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'collection_id' in params:
            path_params['collection_id'] = params['collection_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/collections/{collection_id}/reserve_doi', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CollectionDOI',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_collection_reserve_handle(self, collection_id, **kwargs):
        """
        Private Collection Reserve Handle
        Reserve Handle for collection
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_collection_reserve_handle(collection_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int collection_id: Collection Unique identifier (required)
        :return: CollectionHandle
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_collection_reserve_handle_with_http_info(collection_id, **kwargs)
        else:
            (data) = self.private_collection_reserve_handle_with_http_info(collection_id, **kwargs)
            return data

    def private_collection_reserve_handle_with_http_info(self, collection_id, **kwargs):
        """
        Private Collection Reserve Handle
        Reserve Handle for collection
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_collection_reserve_handle_with_http_info(collection_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int collection_id: Collection Unique identifier (required)
        :return: CollectionHandle
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_collection_reserve_handle" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection_id' is set
        if ('collection_id' not in params) or (params['collection_id'] is None):
            raise ValueError("Missing the required parameter `collection_id` when calling `private_collection_reserve_handle`")

        if 'collection_id' in params and params['collection_id'] < 1:
            raise ValueError("Invalid value for parameter `collection_id` when calling `private_collection_reserve_handle`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'collection_id' in params:
            path_params['collection_id'] = params['collection_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/collections/{collection_id}/reserve_handle', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CollectionHandle',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_collection_resource(self, collection_id, resource, **kwargs):
        """
        Private Collection Resource
        Edit collection resource data.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_collection_resource(collection_id, resource, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int collection_id: Collection unique identifier (required)
        :param Resource resource: Resource data (required)
        :return: Location
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_collection_resource_with_http_info(collection_id, resource, **kwargs)
        else:
            (data) = self.private_collection_resource_with_http_info(collection_id, resource, **kwargs)
            return data

    def private_collection_resource_with_http_info(self, collection_id, resource, **kwargs):
        """
        Private Collection Resource
        Edit collection resource data.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_collection_resource_with_http_info(collection_id, resource, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int collection_id: Collection unique identifier (required)
        :param Resource resource: Resource data (required)
        :return: Location
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection_id', 'resource']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_collection_resource" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection_id' is set
        if ('collection_id' not in params) or (params['collection_id'] is None):
            raise ValueError("Missing the required parameter `collection_id` when calling `private_collection_resource`")
        # verify the required parameter 'resource' is set
        if ('resource' not in params) or (params['resource'] is None):
            raise ValueError("Missing the required parameter `resource` when calling `private_collection_resource`")

        if 'collection_id' in params and params['collection_id'] < 1:
            raise ValueError("Invalid value for parameter `collection_id` when calling `private_collection_resource`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'collection_id' in params:
            path_params['collection_id'] = params['collection_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'resource' in params:
            body_params = params['resource']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/collections/{collection_id}/resource', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Location',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_collection_update(self, collection_id, collection, **kwargs):
        """
        Update collection
        Update collection details; request can also be made with the PATCH method.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_collection_update(collection_id, collection, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int collection_id: Collection Unique identifier (required)
        :param CollectionUpdate collection: Collection description (required)
        :return: LocationWarningsUpdate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_collection_update_with_http_info(collection_id, collection, **kwargs)
        else:
            (data) = self.private_collection_update_with_http_info(collection_id, collection, **kwargs)
            return data

    def private_collection_update_with_http_info(self, collection_id, collection, **kwargs):
        """
        Update collection
        Update collection details; request can also be made with the PATCH method.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_collection_update_with_http_info(collection_id, collection, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int collection_id: Collection Unique identifier (required)
        :param CollectionUpdate collection: Collection description (required)
        :return: LocationWarningsUpdate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection_id', 'collection']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_collection_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection_id' is set
        if ('collection_id' not in params) or (params['collection_id'] is None):
            raise ValueError("Missing the required parameter `collection_id` when calling `private_collection_update`")
        # verify the required parameter 'collection' is set
        if ('collection' not in params) or (params['collection'] is None):
            raise ValueError("Missing the required parameter `collection` when calling `private_collection_update`")

        if 'collection_id' in params and params['collection_id'] < 1:
            raise ValueError("Invalid value for parameter `collection_id` when calling `private_collection_update`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'collection_id' in params:
            path_params['collection_id'] = params['collection_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'collection' in params:
            body_params = params['collection']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/collections/{collection_id}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='LocationWarningsUpdate',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_collections_list(self, **kwargs):
        """
        Private Collections List
        List private collections
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_collections_list(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page: Page number. Used for pagination with page_size
        :param int page_size: The number of results included on a page. Used for pagination with page
        :param int limit: Number of results included on a page. Used for pagination with query
        :param int offset: Where to start the listing(the offset of the first result). Used for pagination with limit
        :param str order: The field by which to order. Default varies by endpoint/resource.
        :param str order_direction:
        :return: list[Collection]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_collections_list_with_http_info(**kwargs)
        else:
            (data) = self.private_collections_list_with_http_info(**kwargs)
            return data

    def private_collections_list_with_http_info(self, **kwargs):
        """
        Private Collections List
        List private collections
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_collections_list_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page: Page number. Used for pagination with page_size
        :param int page_size: The number of results included on a page. Used for pagination with page
        :param int limit: Number of results included on a page. Used for pagination with query
        :param int offset: Where to start the listing(the offset of the first result). Used for pagination with limit
        :param str order: The field by which to order. Default varies by endpoint/resource.
        :param str order_direction:
        :return: list[Collection]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'page_size', 'limit', 'offset', 'order', 'order_direction']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_collections_list" % key
                )
            params[key] = val
        del params['kwargs']

        if 'page' in params and params['page'] > 5000:
            raise ValueError("Invalid value for parameter `page` when calling `private_collections_list`, must be a value less than or equal to `5000`")
        if 'page' in params and params['page'] < 1:
            raise ValueError("Invalid value for parameter `page` when calling `private_collections_list`, must be a value greater than or equal to `1`")
        if 'page_size' in params and params['page_size'] > 1000:
            raise ValueError("Invalid value for parameter `page_size` when calling `private_collections_list`, must be a value less than or equal to `1000`")
        if 'page_size' in params and params['page_size'] < 1:
            raise ValueError("Invalid value for parameter `page_size` when calling `private_collections_list`, must be a value greater than or equal to `1`")
        if 'limit' in params and params['limit'] > 1000:
            raise ValueError("Invalid value for parameter `limit` when calling `private_collections_list`, must be a value less than or equal to `1000`")
        if 'limit' in params and params['limit'] < 1:
            raise ValueError("Invalid value for parameter `limit` when calling `private_collections_list`, must be a value greater than or equal to `1`")
        if 'offset' in params and params['offset'] > 5000:
            raise ValueError("Invalid value for parameter `offset` when calling `private_collections_list`, must be a value less than or equal to `5000`")
        if 'offset' in params and params['offset'] < 0:
            raise ValueError("Invalid value for parameter `offset` when calling `private_collections_list`, must be a value greater than or equal to `0`")

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))
        if 'limit' in params:
            query_params.append(('limit', params['limit']))
        if 'offset' in params:
            query_params.append(('offset', params['offset']))
        if 'order' in params:
            query_params.append(('order', params['order']))
        if 'order_direction' in params:
            query_params.append(('order_direction', params['order_direction']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/collections', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[Collection]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def private_collections_search(self, search, **kwargs):
        """
        Private Collections Search
        Returns a list of private Collections
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_collections_search(search, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param PrivateCollectionSearch search: Search Parameters (required)
        :return: list[Collection]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.private_collections_search_with_http_info(search, **kwargs)
        else:
            (data) = self.private_collections_search_with_http_info(search, **kwargs)
            return data

    def private_collections_search_with_http_info(self, search, **kwargs):
        """
        Private Collections Search
        Returns a list of private Collections
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.private_collections_search_with_http_info(search, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param PrivateCollectionSearch search: Search Parameters (required)
        :return: list[Collection]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['search']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_collections_search" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'search' is set
        if ('search' not in params) or (params['search'] is None):
            raise ValueError("Missing the required parameter `search` when calling `private_collections_search`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'search' in params:
            body_params = params['search']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/account/collections/search', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[Collection]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
