# coding: utf-8

"""
    Figshare API

    Figshare apiv2. Using Swagger 2.0

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AuthorComplete(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'full_name': 'str',
        'is_active': 'bool',
        'url_name': 'str',
        'orcid_id': 'str'
    }

    attribute_map = {
        'id': 'id',
        'full_name': 'full_name',
        'is_active': 'is_active',
        'url_name': 'url_name',
        'orcid_id': 'orcid_id'
    }

    def __init__(self, id=None, full_name=None, is_active=None, url_name=None, orcid_id=None):
        """
        AuthorComplete - a model defined in Swagger
        """

        self._id = None
        self._full_name = None
        self._is_active = None
        self._url_name = None
        self._orcid_id = None

        self.id = id
        self.full_name = full_name
        self.is_active = is_active
        self.url_name = url_name
        self.orcid_id = orcid_id

    @property
    def id(self):
        """
        Gets the id of this AuthorComplete.
        Author id

        :return: The id of this AuthorComplete.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this AuthorComplete.
        Author id

        :param id: The id of this AuthorComplete.
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def full_name(self):
        """
        Gets the full_name of this AuthorComplete.
        Author full name

        :return: The full_name of this AuthorComplete.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """
        Sets the full_name of this AuthorComplete.
        Author full name

        :param full_name: The full_name of this AuthorComplete.
        :type: str
        """
        if full_name is None:
            raise ValueError("Invalid value for `full_name`, must not be `None`")

        self._full_name = full_name

    @property
    def is_active(self):
        """
        Gets the is_active of this AuthorComplete.
        True if author has published items

        :return: The is_active of this AuthorComplete.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """
        Sets the is_active of this AuthorComplete.
        True if author has published items

        :param is_active: The is_active of this AuthorComplete.
        :type: bool
        """
        if is_active is None:
            raise ValueError("Invalid value for `is_active`, must not be `None`")

        self._is_active = is_active

    @property
    def url_name(self):
        """
        Gets the url_name of this AuthorComplete.
        Author url name

        :return: The url_name of this AuthorComplete.
        :rtype: str
        """
        return self._url_name

    @url_name.setter
    def url_name(self, url_name):
        """
        Sets the url_name of this AuthorComplete.
        Author url name

        :param url_name: The url_name of this AuthorComplete.
        :type: str
        """
        if url_name is None:
            raise ValueError("Invalid value for `url_name`, must not be `None`")

        self._url_name = url_name

    @property
    def orcid_id(self):
        """
        Gets the orcid_id of this AuthorComplete.
        Author Orcid

        :return: The orcid_id of this AuthorComplete.
        :rtype: str
        """
        return self._orcid_id

    @orcid_id.setter
    def orcid_id(self, orcid_id):
        """
        Sets the orcid_id of this AuthorComplete.
        Author Orcid

        :param orcid_id: The orcid_id of this AuthorComplete.
        :type: str
        """
        if orcid_id is None:
            raise ValueError("Invalid value for `orcid_id`, must not be `None`")

        self._orcid_id = orcid_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AuthorComplete):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
