# coding: utf-8

"""
    Figshare API

    Figshare apiv2. Using Swagger 2.0

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class FileCreator(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'link': 'str',
        'md5': 'str',
        'name': 'str',
        'size': 'int'
    }

    attribute_map = {
        'link': 'link',
        'md5': 'md5',
        'name': 'name',
        'size': 'size'
    }

    def __init__(self, link=None, md5=None, name=None, size=None):
        """
        FileCreator - a model defined in Swagger
        """

        self._link = None
        self._md5 = None
        self._name = None
        self._size = None

        if link is not None:
          self.link = link
        if md5 is not None:
          self.md5 = md5
        if name is not None:
          self.name = name
        if size is not None:
          self.size = size

    @property
    def link(self):
        """
        Gets the link of this FileCreator.
        Url for an existing file that will not be uploaded to Figshare

        :return: The link of this FileCreator.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """
        Sets the link of this FileCreator.
        Url for an existing file that will not be uploaded to Figshare

        :param link: The link of this FileCreator.
        :type: str
        """

        self._link = link

    @property
    def md5(self):
        """
        Gets the md5 of this FileCreator.
        MD5 sum pre-computed on client side.

        :return: The md5 of this FileCreator.
        :rtype: str
        """
        return self._md5

    @md5.setter
    def md5(self, md5):
        """
        Sets the md5 of this FileCreator.
        MD5 sum pre-computed on client side.

        :param md5: The md5 of this FileCreator.
        :type: str
        """

        self._md5 = md5

    @property
    def name(self):
        """
        Gets the name of this FileCreator.
        File name including the extension; can be omitted only for linked files.

        :return: The name of this FileCreator.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this FileCreator.
        File name including the extension; can be omitted only for linked files.

        :param name: The name of this FileCreator.
        :type: str
        """

        self._name = name

    @property
    def size(self):
        """
        Gets the size of this FileCreator.
        File size in bytes; can be omitted only for linked files.

        :return: The size of this FileCreator.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """
        Sets the size of this FileCreator.
        File size in bytes; can be omitted only for linked files.

        :param size: The size of this FileCreator.
        :type: int
        """

        self._size = size

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, FileCreator):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
