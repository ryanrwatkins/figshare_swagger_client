# coding: utf-8

"""
    Figshare API

    Figshare apiv2. Using Swagger 2.0

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ProjectArticle(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'title': 'str',
        'doi': 'str',
        'handle': 'str',
        'url': 'str',
        'url_public_html': 'str',
        'url_public_api': 'str',
        'url_private_html': 'str',
        'url_private_api': 'str',
        'timeline': 'Timeline',
        'thumb': 'str',
        'defined_type': 'int',
        'defined_type_name': 'str'
    }

    attribute_map = {
        'id': 'id',
        'title': 'title',
        'doi': 'doi',
        'handle': 'handle',
        'url': 'url',
        'url_public_html': 'url_public_html',
        'url_public_api': 'url_public_api',
        'url_private_html': 'url_private_html',
        'url_private_api': 'url_private_api',
        'timeline': 'timeline',
        'thumb': 'thumb',
        'defined_type': 'defined_type',
        'defined_type_name': 'defined_type_name'
    }

    def __init__(self, id=None, title=None, doi=None, handle=None, url=None, url_public_html=None, url_public_api=None, url_private_html=None, url_private_api=None, timeline=None, thumb=None, defined_type=None, defined_type_name=None):
        """
        ProjectArticle - a model defined in Swagger
        """

        self._id = None
        self._title = None
        self._doi = None
        self._handle = None
        self._url = None
        self._url_public_html = None
        self._url_public_api = None
        self._url_private_html = None
        self._url_private_api = None
        self._timeline = None
        self._thumb = None
        self._defined_type = None
        self._defined_type_name = None

        self.id = id
        self.title = title
        self.doi = doi
        self.handle = handle
        self.url = url
        self.url_public_html = url_public_html
        self.url_public_api = url_public_api
        self.url_private_html = url_private_html
        self.url_private_api = url_private_api
        self.timeline = timeline
        self.thumb = thumb
        self.defined_type = defined_type
        self.defined_type_name = defined_type_name

    @property
    def id(self):
        """
        Gets the id of this ProjectArticle.
        Unique identifier for article

        :return: The id of this ProjectArticle.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ProjectArticle.
        Unique identifier for article

        :param id: The id of this ProjectArticle.
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def title(self):
        """
        Gets the title of this ProjectArticle.
        Title of article

        :return: The title of this ProjectArticle.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """
        Sets the title of this ProjectArticle.
        Title of article

        :param title: The title of this ProjectArticle.
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def doi(self):
        """
        Gets the doi of this ProjectArticle.
        DOI

        :return: The doi of this ProjectArticle.
        :rtype: str
        """
        return self._doi

    @doi.setter
    def doi(self, doi):
        """
        Sets the doi of this ProjectArticle.
        DOI

        :param doi: The doi of this ProjectArticle.
        :type: str
        """
        if doi is None:
            raise ValueError("Invalid value for `doi`, must not be `None`")

        self._doi = doi

    @property
    def handle(self):
        """
        Gets the handle of this ProjectArticle.
        Handle

        :return: The handle of this ProjectArticle.
        :rtype: str
        """
        return self._handle

    @handle.setter
    def handle(self, handle):
        """
        Sets the handle of this ProjectArticle.
        Handle

        :param handle: The handle of this ProjectArticle.
        :type: str
        """
        if handle is None:
            raise ValueError("Invalid value for `handle`, must not be `None`")

        self._handle = handle

    @property
    def url(self):
        """
        Gets the url of this ProjectArticle.
        Api endpoint for article

        :return: The url of this ProjectArticle.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        Sets the url of this ProjectArticle.
        Api endpoint for article

        :param url: The url of this ProjectArticle.
        :type: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url

    @property
    def url_public_html(self):
        """
        Gets the url_public_html of this ProjectArticle.
        Public site endpoint for article

        :return: The url_public_html of this ProjectArticle.
        :rtype: str
        """
        return self._url_public_html

    @url_public_html.setter
    def url_public_html(self, url_public_html):
        """
        Sets the url_public_html of this ProjectArticle.
        Public site endpoint for article

        :param url_public_html: The url_public_html of this ProjectArticle.
        :type: str
        """
        if url_public_html is None:
            raise ValueError("Invalid value for `url_public_html`, must not be `None`")

        self._url_public_html = url_public_html

    @property
    def url_public_api(self):
        """
        Gets the url_public_api of this ProjectArticle.
        Public Api endpoint for article

        :return: The url_public_api of this ProjectArticle.
        :rtype: str
        """
        return self._url_public_api

    @url_public_api.setter
    def url_public_api(self, url_public_api):
        """
        Sets the url_public_api of this ProjectArticle.
        Public Api endpoint for article

        :param url_public_api: The url_public_api of this ProjectArticle.
        :type: str
        """
        if url_public_api is None:
            raise ValueError("Invalid value for `url_public_api`, must not be `None`")

        self._url_public_api = url_public_api

    @property
    def url_private_html(self):
        """
        Gets the url_private_html of this ProjectArticle.
        Private site endpoint for article

        :return: The url_private_html of this ProjectArticle.
        :rtype: str
        """
        return self._url_private_html

    @url_private_html.setter
    def url_private_html(self, url_private_html):
        """
        Sets the url_private_html of this ProjectArticle.
        Private site endpoint for article

        :param url_private_html: The url_private_html of this ProjectArticle.
        :type: str
        """
        if url_private_html is None:
            raise ValueError("Invalid value for `url_private_html`, must not be `None`")

        self._url_private_html = url_private_html

    @property
    def url_private_api(self):
        """
        Gets the url_private_api of this ProjectArticle.
        Private Api endpoint for article

        :return: The url_private_api of this ProjectArticle.
        :rtype: str
        """
        return self._url_private_api

    @url_private_api.setter
    def url_private_api(self, url_private_api):
        """
        Sets the url_private_api of this ProjectArticle.
        Private Api endpoint for article

        :param url_private_api: The url_private_api of this ProjectArticle.
        :type: str
        """
        if url_private_api is None:
            raise ValueError("Invalid value for `url_private_api`, must not be `None`")

        self._url_private_api = url_private_api

    @property
    def timeline(self):
        """
        Gets the timeline of this ProjectArticle.
        Various timeline dates

        :return: The timeline of this ProjectArticle.
        :rtype: Timeline
        """
        return self._timeline

    @timeline.setter
    def timeline(self, timeline):
        """
        Sets the timeline of this ProjectArticle.
        Various timeline dates

        :param timeline: The timeline of this ProjectArticle.
        :type: Timeline
        """
        if timeline is None:
            raise ValueError("Invalid value for `timeline`, must not be `None`")

        self._timeline = timeline

    @property
    def thumb(self):
        """
        Gets the thumb of this ProjectArticle.
        Thumbnail image

        :return: The thumb of this ProjectArticle.
        :rtype: str
        """
        return self._thumb

    @thumb.setter
    def thumb(self, thumb):
        """
        Sets the thumb of this ProjectArticle.
        Thumbnail image

        :param thumb: The thumb of this ProjectArticle.
        :type: str
        """
        if thumb is None:
            raise ValueError("Invalid value for `thumb`, must not be `None`")

        self._thumb = thumb

    @property
    def defined_type(self):
        """
        Gets the defined_type of this ProjectArticle.
        Type of article identifier

        :return: The defined_type of this ProjectArticle.
        :rtype: int
        """
        return self._defined_type

    @defined_type.setter
    def defined_type(self, defined_type):
        """
        Sets the defined_type of this ProjectArticle.
        Type of article identifier

        :param defined_type: The defined_type of this ProjectArticle.
        :type: int
        """
        if defined_type is None:
            raise ValueError("Invalid value for `defined_type`, must not be `None`")

        self._defined_type = defined_type

    @property
    def defined_type_name(self):
        """
        Gets the defined_type_name of this ProjectArticle.
        Name of the article type identifier

        :return: The defined_type_name of this ProjectArticle.
        :rtype: str
        """
        return self._defined_type_name

    @defined_type_name.setter
    def defined_type_name(self, defined_type_name):
        """
        Sets the defined_type_name of this ProjectArticle.
        Name of the article type identifier

        :param defined_type_name: The defined_type_name of this ProjectArticle.
        :type: str
        """
        if defined_type_name is None:
            raise ValueError("Invalid value for `defined_type_name`, must not be `None`")

        self._defined_type_name = defined_type_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ProjectArticle):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
