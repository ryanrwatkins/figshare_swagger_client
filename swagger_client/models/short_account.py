# coding: utf-8

"""
    Figshare API

    Figshare apiv2. Using Swagger 2.0

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ShortAccount(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'first_name': 'str',
        'last_name': 'str',
        'institution_id': 'int',
        'email': 'str',
        'active': 'int',
        'institution_user_id': 'str',
        'quota': 'int',
        'used_quota': 'int',
        'user_id': 'int',
        'orcid_id': 'str'
    }

    attribute_map = {
        'id': 'id',
        'first_name': 'first_name',
        'last_name': 'last_name',
        'institution_id': 'institution_id',
        'email': 'email',
        'active': 'active',
        'institution_user_id': 'institution_user_id',
        'quota': 'quota',
        'used_quota': 'used_quota',
        'user_id': 'user_id',
        'orcid_id': 'orcid_id'
    }

    def __init__(self, id=None, first_name=None, last_name=None, institution_id=None, email=None, active=None, institution_user_id=None, quota=None, used_quota=None, user_id=None, orcid_id=None):
        """
        ShortAccount - a model defined in Swagger
        """

        self._id = None
        self._first_name = None
        self._last_name = None
        self._institution_id = None
        self._email = None
        self._active = None
        self._institution_user_id = None
        self._quota = None
        self._used_quota = None
        self._user_id = None
        self._orcid_id = None

        self.id = id
        self.first_name = first_name
        self.last_name = last_name
        self.institution_id = institution_id
        self.email = email
        self.active = active
        self.institution_user_id = institution_user_id
        self.quota = quota
        self.used_quota = used_quota
        self.user_id = user_id
        self.orcid_id = orcid_id

    @property
    def id(self):
        """
        Gets the id of this ShortAccount.
        Account id

        :return: The id of this ShortAccount.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ShortAccount.
        Account id

        :param id: The id of this ShortAccount.
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def first_name(self):
        """
        Gets the first_name of this ShortAccount.
        First Name

        :return: The first_name of this ShortAccount.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """
        Sets the first_name of this ShortAccount.
        First Name

        :param first_name: The first_name of this ShortAccount.
        :type: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")

        self._first_name = first_name

    @property
    def last_name(self):
        """
        Gets the last_name of this ShortAccount.
        Last Name

        :return: The last_name of this ShortAccount.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """
        Sets the last_name of this ShortAccount.
        Last Name

        :param last_name: The last_name of this ShortAccount.
        :type: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")

        self._last_name = last_name

    @property
    def institution_id(self):
        """
        Gets the institution_id of this ShortAccount.
        Account institution

        :return: The institution_id of this ShortAccount.
        :rtype: int
        """
        return self._institution_id

    @institution_id.setter
    def institution_id(self, institution_id):
        """
        Sets the institution_id of this ShortAccount.
        Account institution

        :param institution_id: The institution_id of this ShortAccount.
        :type: int
        """
        if institution_id is None:
            raise ValueError("Invalid value for `institution_id`, must not be `None`")

        self._institution_id = institution_id

    @property
    def email(self):
        """
        Gets the email of this ShortAccount.
        User email

        :return: The email of this ShortAccount.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this ShortAccount.
        User email

        :param email: The email of this ShortAccount.
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def active(self):
        """
        Gets the active of this ShortAccount.
        Account activity status

        :return: The active of this ShortAccount.
        :rtype: int
        """
        return self._active

    @active.setter
    def active(self, active):
        """
        Sets the active of this ShortAccount.
        Account activity status

        :param active: The active of this ShortAccount.
        :type: int
        """
        if active is None:
            raise ValueError("Invalid value for `active`, must not be `None`")

        self._active = active

    @property
    def institution_user_id(self):
        """
        Gets the institution_user_id of this ShortAccount.
        Account institution user id

        :return: The institution_user_id of this ShortAccount.
        :rtype: str
        """
        return self._institution_user_id

    @institution_user_id.setter
    def institution_user_id(self, institution_user_id):
        """
        Sets the institution_user_id of this ShortAccount.
        Account institution user id

        :param institution_user_id: The institution_user_id of this ShortAccount.
        :type: str
        """
        if institution_user_id is None:
            raise ValueError("Invalid value for `institution_user_id`, must not be `None`")

        self._institution_user_id = institution_user_id

    @property
    def quota(self):
        """
        Gets the quota of this ShortAccount.
        Total storage available to account, in bytes

        :return: The quota of this ShortAccount.
        :rtype: int
        """
        return self._quota

    @quota.setter
    def quota(self, quota):
        """
        Sets the quota of this ShortAccount.
        Total storage available to account, in bytes

        :param quota: The quota of this ShortAccount.
        :type: int
        """
        if quota is None:
            raise ValueError("Invalid value for `quota`, must not be `None`")

        self._quota = quota

    @property
    def used_quota(self):
        """
        Gets the used_quota of this ShortAccount.
        Storage used by the account, in bytes

        :return: The used_quota of this ShortAccount.
        :rtype: int
        """
        return self._used_quota

    @used_quota.setter
    def used_quota(self, used_quota):
        """
        Sets the used_quota of this ShortAccount.
        Storage used by the account, in bytes

        :param used_quota: The used_quota of this ShortAccount.
        :type: int
        """
        if used_quota is None:
            raise ValueError("Invalid value for `used_quota`, must not be `None`")

        self._used_quota = used_quota

    @property
    def user_id(self):
        """
        Gets the user_id of this ShortAccount.
        User id associated with account, useful for example for adding the account as an author to an item

        :return: The user_id of this ShortAccount.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """
        Sets the user_id of this ShortAccount.
        User id associated with account, useful for example for adding the account as an author to an item

        :param user_id: The user_id of this ShortAccount.
        :type: int
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")

        self._user_id = user_id

    @property
    def orcid_id(self):
        """
        Gets the orcid_id of this ShortAccount.
        ORCID iD associated to account

        :return: The orcid_id of this ShortAccount.
        :rtype: str
        """
        return self._orcid_id

    @orcid_id.setter
    def orcid_id(self, orcid_id):
        """
        Sets the orcid_id of this ShortAccount.
        ORCID iD associated to account

        :param orcid_id: The orcid_id of this ShortAccount.
        :type: str
        """
        if orcid_id is None:
            raise ValueError("Invalid value for `orcid_id`, must not be `None`")

        self._orcid_id = orcid_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ShortAccount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
