# coding: utf-8

"""
    Figshare API

    Figshare apiv2. Using Swagger 2.0

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AccountReport(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'account_id': 'int',
        'created_date': 'str',
        'status': 'str',
        'download_url': 'str',
        'group_id': 'int'
    }

    attribute_map = {
        'id': 'id',
        'account_id': 'account_id',
        'created_date': 'created_date',
        'status': 'status',
        'download_url': 'download_url',
        'group_id': 'group_id'
    }

    def __init__(self, id=None, account_id=None, created_date=None, status=None, download_url=None, group_id=None):
        """
        AccountReport - a model defined in Swagger
        """

        self._id = None
        self._account_id = None
        self._created_date = None
        self._status = None
        self._download_url = None
        self._group_id = None

        self.id = id
        self.account_id = account_id
        self.created_date = created_date
        self.status = status
        self.download_url = download_url
        self.group_id = group_id

    @property
    def id(self):
        """
        Gets the id of this AccountReport.
        A unique ID for the AccountRecord

        :return: The id of this AccountReport.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this AccountReport.
        A unique ID for the AccountRecord

        :param id: The id of this AccountReport.
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def account_id(self):
        """
        Gets the account_id of this AccountReport.
        The ID of the account which generated this report.

        :return: The account_id of this AccountReport.
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """
        Sets the account_id of this AccountReport.
        The ID of the account which generated this report.

        :param account_id: The account_id of this AccountReport.
        :type: int
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")

        self._account_id = account_id

    @property
    def created_date(self):
        """
        Gets the created_date of this AccountReport.
        Date when the AccountReport was requested

        :return: The created_date of this AccountReport.
        :rtype: str
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """
        Sets the created_date of this AccountReport.
        Date when the AccountReport was requested

        :param created_date: The created_date of this AccountReport.
        :type: str
        """
        if created_date is None:
            raise ValueError("Invalid value for `created_date`, must not be `None`")

        self._created_date = created_date

    @property
    def status(self):
        """
        Gets the status of this AccountReport.
        Status of the report

        :return: The status of this AccountReport.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this AccountReport.
        Status of the report

        :param status: The status of this AccountReport.
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")
        allowed_values = ["missing", "pending", "done"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def download_url(self):
        """
        Gets the download_url of this AccountReport.
        The download link for the generated XLSX

        :return: The download_url of this AccountReport.
        :rtype: str
        """
        return self._download_url

    @download_url.setter
    def download_url(self, download_url):
        """
        Sets the download_url of this AccountReport.
        The download link for the generated XLSX

        :param download_url: The download_url of this AccountReport.
        :type: str
        """
        if download_url is None:
            raise ValueError("Invalid value for `download_url`, must not be `None`")

        self._download_url = download_url

    @property
    def group_id(self):
        """
        Gets the group_id of this AccountReport.
        The group ID that was used to filter the report, if any.

        :return: The group_id of this AccountReport.
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """
        Sets the group_id of this AccountReport.
        The group ID that was used to filter the report, if any.

        :param group_id: The group_id of this AccountReport.
        :type: int
        """
        if group_id is None:
            raise ValueError("Invalid value for `group_id`, must not be `None`")

        self._group_id = group_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AccountReport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
