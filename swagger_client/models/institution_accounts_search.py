# coding: utf-8

"""
    Figshare API

    Figshare apiv2. Using Swagger 2.0

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class InstitutionAccountsSearch(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'search_for': 'str',
        'is_active': 'int',
        'page': 'int',
        'page_size': 'int',
        'limit': 'int',
        'offset': 'int',
        'institution_user_id': 'str',
        'email': 'str'
    }

    attribute_map = {
        'search_for': 'search_for',
        'is_active': 'is_active',
        'page': 'page',
        'page_size': 'page_size',
        'limit': 'limit',
        'offset': 'offset',
        'institution_user_id': 'institution_user_id',
        'email': 'email'
    }

    def __init__(self, search_for=None, is_active=None, page=None, page_size=10, limit=None, offset=None, institution_user_id=None, email=None):
        """
        InstitutionAccountsSearch - a model defined in Swagger
        """

        self._search_for = None
        self._is_active = None
        self._page = None
        self._page_size = None
        self._limit = None
        self._offset = None
        self._institution_user_id = None
        self._email = None

        if search_for is not None:
          self.search_for = search_for
        if is_active is not None:
          self.is_active = is_active
        if page is not None:
          self.page = page
        if page_size is not None:
          self.page_size = page_size
        if limit is not None:
          self.limit = limit
        if offset is not None:
          self.offset = offset
        if institution_user_id is not None:
          self.institution_user_id = institution_user_id
        if email is not None:
          self.email = email

    @property
    def search_for(self):
        """
        Gets the search_for of this InstitutionAccountsSearch.
        Search term

        :return: The search_for of this InstitutionAccountsSearch.
        :rtype: str
        """
        return self._search_for

    @search_for.setter
    def search_for(self, search_for):
        """
        Sets the search_for of this InstitutionAccountsSearch.
        Search term

        :param search_for: The search_for of this InstitutionAccountsSearch.
        :type: str
        """

        self._search_for = search_for

    @property
    def is_active(self):
        """
        Gets the is_active of this InstitutionAccountsSearch.
        Filter by active status

        :return: The is_active of this InstitutionAccountsSearch.
        :rtype: int
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """
        Sets the is_active of this InstitutionAccountsSearch.
        Filter by active status

        :param is_active: The is_active of this InstitutionAccountsSearch.
        :type: int
        """
        if is_active is not None and is_active > 1:
            raise ValueError("Invalid value for `is_active`, must be a value less than or equal to `1`")
        if is_active is not None and is_active < 0:
            raise ValueError("Invalid value for `is_active`, must be a value greater than or equal to `0`")

        self._is_active = is_active

    @property
    def page(self):
        """
        Gets the page of this InstitutionAccountsSearch.
        Page number. Used for pagination with page_size

        :return: The page of this InstitutionAccountsSearch.
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """
        Sets the page of this InstitutionAccountsSearch.
        Page number. Used for pagination with page_size

        :param page: The page of this InstitutionAccountsSearch.
        :type: int
        """
        if page is not None and page > 5000:
            raise ValueError("Invalid value for `page`, must be a value less than or equal to `5000`")
        if page is not None and page < 1:
            raise ValueError("Invalid value for `page`, must be a value greater than or equal to `1`")

        self._page = page

    @property
    def page_size(self):
        """
        Gets the page_size of this InstitutionAccountsSearch.
        The number of results included on a page. Used for pagination with page

        :return: The page_size of this InstitutionAccountsSearch.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """
        Sets the page_size of this InstitutionAccountsSearch.
        The number of results included on a page. Used for pagination with page

        :param page_size: The page_size of this InstitutionAccountsSearch.
        :type: int
        """
        if page_size is not None and page_size > 1000:
            raise ValueError("Invalid value for `page_size`, must be a value less than or equal to `1000`")
        if page_size is not None and page_size < 1:
            raise ValueError("Invalid value for `page_size`, must be a value greater than or equal to `1`")

        self._page_size = page_size

    @property
    def limit(self):
        """
        Gets the limit of this InstitutionAccountsSearch.
        Number of results included on a page. Used for pagination with query

        :return: The limit of this InstitutionAccountsSearch.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """
        Sets the limit of this InstitutionAccountsSearch.
        Number of results included on a page. Used for pagination with query

        :param limit: The limit of this InstitutionAccountsSearch.
        :type: int
        """
        if limit is not None and limit > 1000:
            raise ValueError("Invalid value for `limit`, must be a value less than or equal to `1000`")
        if limit is not None and limit < 1:
            raise ValueError("Invalid value for `limit`, must be a value greater than or equal to `1`")

        self._limit = limit

    @property
    def offset(self):
        """
        Gets the offset of this InstitutionAccountsSearch.
        Where to start the listing(the offset of the first result). Used for pagination with limit

        :return: The offset of this InstitutionAccountsSearch.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """
        Sets the offset of this InstitutionAccountsSearch.
        Where to start the listing(the offset of the first result). Used for pagination with limit

        :param offset: The offset of this InstitutionAccountsSearch.
        :type: int
        """
        if offset is not None and offset > 5000:
            raise ValueError("Invalid value for `offset`, must be a value less than or equal to `5000`")
        if offset is not None and offset < 0:
            raise ValueError("Invalid value for `offset`, must be a value greater than or equal to `0`")

        self._offset = offset

    @property
    def institution_user_id(self):
        """
        Gets the institution_user_id of this InstitutionAccountsSearch.
        filter by institution_user_id

        :return: The institution_user_id of this InstitutionAccountsSearch.
        :rtype: str
        """
        return self._institution_user_id

    @institution_user_id.setter
    def institution_user_id(self, institution_user_id):
        """
        Sets the institution_user_id of this InstitutionAccountsSearch.
        filter by institution_user_id

        :param institution_user_id: The institution_user_id of this InstitutionAccountsSearch.
        :type: str
        """

        self._institution_user_id = institution_user_id

    @property
    def email(self):
        """
        Gets the email of this InstitutionAccountsSearch.
        filter by email

        :return: The email of this InstitutionAccountsSearch.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this InstitutionAccountsSearch.
        filter by email

        :param email: The email of this InstitutionAccountsSearch.
        :type: str
        """

        self._email = email

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, InstitutionAccountsSearch):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
