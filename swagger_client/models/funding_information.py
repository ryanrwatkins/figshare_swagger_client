# coding: utf-8

"""
    Figshare API

    Figshare apiv2. Using Swagger 2.0

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class FundingInformation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'title': 'str',
        'grant_code': 'str',
        'funder_name': 'str',
        'is_user_defined': 'bool',
        'url': 'str'
    }

    attribute_map = {
        'id': 'id',
        'title': 'title',
        'grant_code': 'grant_code',
        'funder_name': 'funder_name',
        'is_user_defined': 'is_user_defined',
        'url': 'url'
    }

    def __init__(self, id=None, title=None, grant_code=None, funder_name=None, is_user_defined=None, url=None):
        """
        FundingInformation - a model defined in Swagger
        """

        self._id = None
        self._title = None
        self._grant_code = None
        self._funder_name = None
        self._is_user_defined = None
        self._url = None

        self.id = id
        self.title = title
        self.grant_code = grant_code
        self.funder_name = funder_name
        self.is_user_defined = is_user_defined
        self.url = url

    @property
    def id(self):
        """
        Gets the id of this FundingInformation.
        Funding id

        :return: The id of this FundingInformation.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this FundingInformation.
        Funding id

        :param id: The id of this FundingInformation.
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def title(self):
        """
        Gets the title of this FundingInformation.
        The funding name

        :return: The title of this FundingInformation.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """
        Sets the title of this FundingInformation.
        The funding name

        :param title: The title of this FundingInformation.
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def grant_code(self):
        """
        Gets the grant_code of this FundingInformation.
        The grant code

        :return: The grant_code of this FundingInformation.
        :rtype: str
        """
        return self._grant_code

    @grant_code.setter
    def grant_code(self, grant_code):
        """
        Sets the grant_code of this FundingInformation.
        The grant code

        :param grant_code: The grant_code of this FundingInformation.
        :type: str
        """
        if grant_code is None:
            raise ValueError("Invalid value for `grant_code`, must not be `None`")

        self._grant_code = grant_code

    @property
    def funder_name(self):
        """
        Gets the funder_name of this FundingInformation.
        Funder's name

        :return: The funder_name of this FundingInformation.
        :rtype: str
        """
        return self._funder_name

    @funder_name.setter
    def funder_name(self, funder_name):
        """
        Sets the funder_name of this FundingInformation.
        Funder's name

        :param funder_name: The funder_name of this FundingInformation.
        :type: str
        """
        if funder_name is None:
            raise ValueError("Invalid value for `funder_name`, must not be `None`")

        self._funder_name = funder_name

    @property
    def is_user_defined(self):
        """
        Gets the is_user_defined of this FundingInformation.
        Return whether the grant has been introduced manually

        :return: The is_user_defined of this FundingInformation.
        :rtype: bool
        """
        return self._is_user_defined

    @is_user_defined.setter
    def is_user_defined(self, is_user_defined):
        """
        Sets the is_user_defined of this FundingInformation.
        Return whether the grant has been introduced manually

        :param is_user_defined: The is_user_defined of this FundingInformation.
        :type: bool
        """
        if is_user_defined is None:
            raise ValueError("Invalid value for `is_user_defined`, must not be `None`")

        self._is_user_defined = is_user_defined

    @property
    def url(self):
        """
        Gets the url of this FundingInformation.
        The grant url

        :return: The url of this FundingInformation.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        Sets the url of this FundingInformation.
        The grant url

        :param url: The url of this FundingInformation.
        :type: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, FundingInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
