# coding: utf-8

"""
    Figshare API

    Figshare apiv2. Using Swagger 2.0

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class UploadFilePart(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'part_no': 'int',
        'start_offset': 'int',
        'end_offset': 'int',
        'status': 'str',
        'locked': 'bool'
    }

    attribute_map = {
        'part_no': 'partNo',
        'start_offset': 'startOffset',
        'end_offset': 'endOffset',
        'status': 'status',
        'locked': 'locked'
    }

    def __init__(self, part_no=None, start_offset=None, end_offset=None, status=None, locked=None):
        """
        UploadFilePart - a model defined in Swagger
        """

        self._part_no = None
        self._start_offset = None
        self._end_offset = None
        self._status = None
        self._locked = None

        if part_no is not None:
          self.part_no = part_no
        if start_offset is not None:
          self.start_offset = start_offset
        if end_offset is not None:
          self.end_offset = end_offset
        if status is not None:
          self.status = status
        if locked is not None:
          self.locked = locked

    @property
    def part_no(self):
        """
        Gets the part_no of this UploadFilePart.
        File part id

        :return: The part_no of this UploadFilePart.
        :rtype: int
        """
        return self._part_no

    @part_no.setter
    def part_no(self, part_no):
        """
        Sets the part_no of this UploadFilePart.
        File part id

        :param part_no: The part_no of this UploadFilePart.
        :type: int
        """

        self._part_no = part_no

    @property
    def start_offset(self):
        """
        Gets the start_offset of this UploadFilePart.
        Indexes on byte range. zero-based and inclusive

        :return: The start_offset of this UploadFilePart.
        :rtype: int
        """
        return self._start_offset

    @start_offset.setter
    def start_offset(self, start_offset):
        """
        Sets the start_offset of this UploadFilePart.
        Indexes on byte range. zero-based and inclusive

        :param start_offset: The start_offset of this UploadFilePart.
        :type: int
        """

        self._start_offset = start_offset

    @property
    def end_offset(self):
        """
        Gets the end_offset of this UploadFilePart.
        Indexes on byte range. zero-based and inclusive

        :return: The end_offset of this UploadFilePart.
        :rtype: int
        """
        return self._end_offset

    @end_offset.setter
    def end_offset(self, end_offset):
        """
        Sets the end_offset of this UploadFilePart.
        Indexes on byte range. zero-based and inclusive

        :param end_offset: The end_offset of this UploadFilePart.
        :type: int
        """

        self._end_offset = end_offset

    @property
    def status(self):
        """
        Gets the status of this UploadFilePart.
        part status

        :return: The status of this UploadFilePart.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this UploadFilePart.
        part status

        :param status: The status of this UploadFilePart.
        :type: str
        """
        allowed_values = ["PENDING", "COMPLETE"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def locked(self):
        """
        Gets the locked of this UploadFilePart.
        When a part is being uploaded it is being locked, by setting the locked flag to true. No changes/uploads can happen on this part from other requests.

        :return: The locked of this UploadFilePart.
        :rtype: bool
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """
        Sets the locked of this UploadFilePart.
        When a part is being uploaded it is being locked, by setting the locked flag to true. No changes/uploads can happen on this part from other requests.

        :param locked: The locked of this UploadFilePart.
        :type: bool
        """

        self._locked = locked

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, UploadFilePart):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
